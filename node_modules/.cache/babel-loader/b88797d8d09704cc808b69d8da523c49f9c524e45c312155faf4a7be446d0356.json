{"ast":null,"code":"// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Health check error:', error);\n    return false;\n  }\n};\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport const fetchAvailableSeats = async (date, lab) => {\n  const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${lab}`);\n  return handleResponse(response);\n};\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport const bookSlot = async bookingData => {\n  const response = await fetch(`${API_BASE_URL}/book-slot`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bookingData)\n  });\n  return handleResponse(response);\n};\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport const fetchBookedSlots = async email => {\n  const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n  return handleResponse(response);\n};\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport const deleteBookedSlot = async slotId => {\n  const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(response);\n};\n\n/**\n * Fetch pending bookings (admin only)\n * @param {string} adminEmail - The admin's email\n * @returns {Promise<Array>} - Array of pending bookings\n */\nexport const fetchPendingBookings = async adminEmail => {\n  const response = await fetch(`${API_BASE_URL}/admin/pending-bookings?admin_email=${encodeURIComponent(adminEmail)}`);\n  return handleResponse(response);\n};\n\n/**\n * Handle booking action (confirm/reject)\n * @param {number} bookingId - The booking ID to update\n * @param {string} action - The action to perform ('confirm' or 'reject')\n * @param {string} adminEmail - The admin's email\n * @returns {Promise<Object>} - Action confirmation\n */\nexport const handleBookingAction = async (bookingId, action, adminEmail) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/admin/booking/${bookingId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        admin_email: adminEmail,\n        action: action\n      })\n    });\n\n    // Log the response for debugging\n    console.log('Booking action response:', {\n      status: response.status,\n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries())\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error in handleBookingAction:', error);\n    throw new Error(error.message || 'Failed to update booking status');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","checkApiHealth","response","fetch","ok","error","console","handleResponse","contentType","headers","get","includes","text","Error","data","json","message","fetchAvailableSeats","date","lab","bookSlot","bookingData","method","body","JSON","stringify","fetchBookedSlots","email","encodeURIComponent","deleteBookedSlot","slotId","fetchPendingBookings","adminEmail","handleBookingAction","bookingId","action","admin_email","log","status","statusText","Object","fromEntries","entries"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/services/api.js"],"sourcesContent":["// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Health check error:', error);\n    return false;\n  }\n};\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  \n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport const fetchAvailableSeats = async (date, lab) => {\n  const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${lab}`);\n  return handleResponse(response);\n};\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport const bookSlot = async (bookingData) => {\n  const response = await fetch(`${API_BASE_URL}/book-slot`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(bookingData),\n  });\n  return handleResponse(response);\n};\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport const fetchBookedSlots = async (email) => {\n  const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n  return handleResponse(response);\n};\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport const deleteBookedSlot = async (slotId) => {\n  const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n    method: 'DELETE',\n  });\n  return handleResponse(response);\n};\n\n/**\n * Fetch pending bookings (admin only)\n * @param {string} adminEmail - The admin's email\n * @returns {Promise<Array>} - Array of pending bookings\n */\nexport const fetchPendingBookings = async (adminEmail) => {\n  const response = await fetch(`${API_BASE_URL}/admin/pending-bookings?admin_email=${encodeURIComponent(adminEmail)}`);\n  return handleResponse(response);\n};\n\n/**\n * Handle booking action (confirm/reject)\n * @param {number} bookingId - The booking ID to update\n * @param {string} action - The action to perform ('confirm' or 'reject')\n * @param {string} adminEmail - The admin's email\n * @returns {Promise<Object>} - Action confirmation\n */\nexport const handleBookingAction = async (bookingId, action, adminEmail) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/admin/booking/${bookingId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        admin_email: adminEmail,\n        action: action\n      }),\n    });\n    \n    // Log the response for debugging\n    console.log('Booking action response:', {\n      status: response.status,\n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries())\n    });\n    \n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error in handleBookingAction:', error);\n    throw new Error(error.message || 'Failed to update booking status');\n  }\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG,2BAA2B;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,SAAS,CAAC;IACtD,OAAOE,QAAQ,CAACE,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAeE,cAAcA,CAACL,QAAQ,EAAE;EACtC,MAAMM,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC7D,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCN,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEO,IAAI,CAAC;IACzC,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;EAClF;EAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;EAClC,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIS,KAAK,CAACC,IAAI,CAACT,KAAK,IAAIS,IAAI,CAACE,OAAO,IAAI,oBAAoB,CAAC;EACrE;EACA,OAAOF,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,KAAK;EACtD,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,yBAAyBkB,IAAI,QAAQC,GAAG,EAAE,CAAC;EACvF,OAAOZ,cAAc,CAACL,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,QAAQ,GAAG,MAAOC,WAAW,IAAK;EAC7C,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,EAAE;IACxDsB,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;EAClC,CAAC,CAAC;EACF,OAAOd,cAAc,CAACL,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMwB,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC/C,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,uBAAuB4B,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;EAC/F,OAAOpB,cAAc,CAACL,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2B,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EAChD,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgB8B,MAAM,EAAE,EAAE;IACpER,MAAM,EAAE;EACV,CAAC,CAAC;EACF,OAAOf,cAAc,CAACL,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM6B,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACxD,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,uCAAuC4B,kBAAkB,CAACI,UAAU,CAAC,EAAE,CAAC;EACpH,OAAOzB,cAAc,CAACL,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+B,mBAAmB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,MAAM,EAAEH,UAAU,KAAK;EAC1E,IAAI;IACF,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,kBAAkBkC,SAAS,EAAE,EAAE;MACzEZ,MAAM,EAAE,OAAO;MACfb,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBW,WAAW,EAAEJ,UAAU;QACvBG,MAAM,EAAEA;MACV,CAAC;IACH,CAAC,CAAC;;IAEF;IACA7B,OAAO,CAAC+B,GAAG,CAAC,0BAA0B,EAAE;MACtCC,MAAM,EAAEpC,QAAQ,CAACoC,MAAM;MACvBC,UAAU,EAAErC,QAAQ,CAACqC,UAAU;MAC/B9B,OAAO,EAAE+B,MAAM,CAACC,WAAW,CAACvC,QAAQ,CAACO,OAAO,CAACiC,OAAO,CAAC,CAAC;IACxD,CAAC,CAAC;IAEF,OAAOnC,cAAc,CAACL,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAM,IAAIQ,KAAK,CAACR,KAAK,CAACW,OAAO,IAAI,iCAAiC,CAAC;EACrE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}