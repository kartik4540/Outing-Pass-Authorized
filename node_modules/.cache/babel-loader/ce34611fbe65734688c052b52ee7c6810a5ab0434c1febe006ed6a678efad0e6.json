{"ast":null,"code":"const API_BASE_URL='http://localhost:8080/api';/**\r\n * Check if the API server is running\r\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\r\n */export async function checkApiHealth(){try{const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),5000);const response=await fetch(`${API_BASE_URL}/health`,{signal:controller.signal});clearTimeout(timeoutId);if(response.ok){return true;}return false;}catch(error){console.error('Health check failed:',error);return false;}}/**\r\n * Fetch available seats for a given date\r\n * @param {string} date - The date to fetch available seats for\r\n * @returns {Promise<Object>} - Available seats data\r\n */export async function fetchAvailableSeats(date){try{// Check API health first\nconst isHealthy=await checkApiHealth();if(!isHealthy){throw new Error('Backend server is not running. Please start the Flask server.');}const response=await fetch(`${API_BASE_URL}/available-seats?date=${date}`);const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to fetch available seats');}return data;}catch(error){console.error('Error fetching available seats:',error);throw error;}}/**\r\n * Book a lab slot\r\n * @param {Object} bookingData - The booking data\r\n * @returns {Promise<Object>} - Booking confirmation\r\n */export async function bookSlot(bookingData){try{// Check API health first\nconst isHealthy=await checkApiHealth();if(!isHealthy){throw new Error('Backend server is not running. Please start the Flask server.');}const response=await fetch(`${API_BASE_URL}/book-slot`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(bookingData)});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to book slot');}return data;}catch(error){console.error('Error booking slot:',error);throw error;}}/**\r\n * Fetch booked slots for a user\r\n * @param {string} email - The user's email\r\n * @returns {Promise<Array>} - Array of booked slots\r\n */export async function fetchBookedSlots(email){try{// Check API health first\nconst isHealthy=await checkApiHealth();if(!isHealthy){throw new Error('Backend server is not running. Please start the Flask server.');}const response=await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to fetch booked slots');}return data;}catch(error){console.error('Error fetching booked slots:',error);throw error;}}/**\r\n * Delete a booked slot\r\n * @param {number} slotId - The slot ID to delete\r\n * @returns {Promise<Object>} - Deletion confirmation\r\n */export async function deleteBookedSlot(slotId){try{// Check API health first\nconst isHealthy=await checkApiHealth();if(!isHealthy){throw new Error('Backend server is not running. Please start the Flask server.');}const response=await fetch(`${API_BASE_URL}/delete-slot/${slotId}`,{method:'DELETE'});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to delete booked slot');}return data;}catch(error){console.error('Error deleting booked slot:',error);throw error;}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}