{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Check if the API server is running\r\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\r\n */\nexport async function checkApiHealth() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    if (response.ok) {\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    return false;\n  }\n}\n\n/**\r\n * Fetch available seats for a given date\r\n * @param {string} date - The date to fetch available seats for\r\n * @returns {Promise<Object>} - Available seats data\r\n */\nexport async function fetchAvailableSeats(date) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch available seats');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Book a lab slot\r\n * @param {Object} bookingData - The booking data\r\n * @returns {Promise<Object>} - Booking confirmation\r\n */\nexport async function bookSlot(bookingData) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookingData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to book slot');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Fetch booked slots for a user\r\n * @param {string} email - The user's email\r\n * @returns {Promise<Array>} - Array of booked slots\r\n */\nexport async function fetchBookedSlots(email) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch booked slots');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Delete a booked slot\r\n * @param {number} slotId - The slot ID to delete\r\n * @returns {Promise<Object>} - Deletion confirmation\r\n */\nexport async function deleteBookedSlot(slotId) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n      method: 'DELETE'\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to delete booked slot');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error deleting booked slot:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","checkApiHealth","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","error","console","fetchAvailableSeats","date","isHealthy","Error","data","json","bookSlot","bookingData","method","headers","body","JSON","stringify","message","fetchBookedSlots","email","encodeURIComponent","deleteBookedSlot","slotId"],"sources":["C:/Users/91989/Desktop/KARTIK/random project/fswd/SRMLAB/react-version/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Check if the API server is running\r\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\r\n */\r\nexport async function checkApiHealth() {\r\n  try {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/health`, {\r\n      signal: controller.signal\r\n    });\r\n    \r\n    clearTimeout(timeoutId);\r\n    \r\n    if (response.ok) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  } catch (error) {\r\n    console.error('Health check failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch available seats for a given date\r\n * @param {string} date - The date to fetch available seats for\r\n * @returns {Promise<Object>} - Available seats data\r\n */\r\nexport async function fetchAvailableSeats(date) {\r\n  try {\r\n    // Check API health first\r\n    const isHealthy = await checkApiHealth();\r\n    if (!isHealthy) {\r\n      throw new Error('Backend server is not running. Please start the Flask server.');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to fetch available seats');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching available seats:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Book a lab slot\r\n * @param {Object} bookingData - The booking data\r\n * @returns {Promise<Object>} - Booking confirmation\r\n */\r\nexport async function bookSlot(bookingData) {\r\n  try {\r\n    // Check API health first\r\n    const isHealthy = await checkApiHealth();\r\n    if (!isHealthy) {\r\n      throw new Error('Backend server is not running. Please start the Flask server.');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(bookingData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Failed to book slot');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error booking slot:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch booked slots for a user\r\n * @param {string} email - The user's email\r\n * @returns {Promise<Array>} - Array of booked slots\r\n */\r\nexport async function fetchBookedSlots(email) {\r\n  try {\r\n    // Check API health first\r\n    const isHealthy = await checkApiHealth();\r\n    if (!isHealthy) {\r\n      throw new Error('Backend server is not running. Please start the Flask server.');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to fetch booked slots');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching booked slots:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a booked slot\r\n * @param {number} slotId - The slot ID to delete\r\n * @returns {Promise<Object>} - Deletion confirmation\r\n */\r\nexport async function deleteBookedSlot(slotId) {\r\n  try {\r\n    // Check API health first\r\n    const isHealthy = await checkApiHealth();\r\n    if (!isHealthy) {\r\n      throw new Error('Backend server is not running. Please start the Flask server.');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to delete booked slot');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting booked slot:', error);\r\n    throw error;\r\n  }\r\n} "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,IAAI;IACF,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;IAE5D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,SAAS,EAAE;MACrDS,MAAM,EAAEP,UAAU,CAACO;IACrB,CAAC,CAAC;IAEFC,YAAY,CAACN,SAAS,CAAC;IAEvB,IAAIG,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,mBAAmBA,CAACC,IAAI,EAAE;EAC9C,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,MAAMf,cAAc,CAAC,CAAC;IACxC,IAAI,CAACe,SAAS,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,yBAAyBe,IAAI,EAAE,CAAC;IAC5E,MAAMG,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,iCAAiC,CAAC;IAClE;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,QAAQA,CAACC,WAAW,EAAE;EAC1C,IAAI;IACF;IACA,MAAML,SAAS,GAAG,MAAMf,cAAc,CAAC,CAAC;IACxC,IAAI,CAACe,SAAS,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,YAAY,EAAE;MACxDsB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMH,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACS,OAAO,IAAI,qBAAqB,CAAC;IACxD;IAEA,OAAOT,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAegB,gBAAgBA,CAACC,KAAK,EAAE;EAC5C,IAAI;IACF;IACA,MAAMb,SAAS,GAAG,MAAMf,cAAc,CAAC,CAAC;IACxC,IAAI,CAACe,SAAS,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,uBAAuB8B,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;IAC/F,MAAMX,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAemB,gBAAgBA,CAACC,MAAM,EAAE;EAC7C,IAAI;IACF;IACA,MAAMhB,SAAS,GAAG,MAAMf,cAAc,CAAC,CAAC;IACxC,IAAI,CAACe,SAAS,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,gBAAgBgC,MAAM,EAAE,EAAE;MACpEV,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMJ,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAElC,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}