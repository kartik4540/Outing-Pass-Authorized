{"ast":null,"code":"// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Health check error:', error);\n    return false;\n  }\n};\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport const fetchAvailableSeats = async (date, lab) => {\n  const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${lab}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch available seats');\n  }\n  return response.json();\n};\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\nexport async function fetchAvailableSeats(date, lab) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${encodeURIComponent(lab)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n}\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport async function bookSlot(bookingData) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookingData)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport async function fetchBookedSlots(email) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n}\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport async function deleteBookedSlot(slotId) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error deleting booked slot:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","checkApiHealth","response","fetch","ok","error","console","handleResponse","contentType","headers","get","includes","text","Error","data","json","message","fetchAvailableSeats","date","lab","bookSlot","bookingData","isHealthy","method","body","JSON","stringify","fetchBookedSlots","email","encodeURIComponent","deleteBookedSlot","slotId"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/services/api.js"],"sourcesContent":["// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Health check error:', error);\n    return false;\n  }\n};\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  \n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport const fetchAvailableSeats = async (date, lab) => {\n  const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${lab}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch available seats');\n  }\n  return response.json();\n};\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\nexport async function fetchAvailableSeats(date, lab) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${encodeURIComponent(lab)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n}\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport async function bookSlot(bookingData) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(bookingData),\n    });\n\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport async function fetchBookedSlots(email) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n}\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport async function deleteBookedSlot(slotId) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n      method: 'DELETE',\n    });\n\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error deleting booked slot:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG,2BAA2B;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,SAAS,CAAC;IACtD,OAAOE,QAAQ,CAACE,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAeE,cAAcA,CAACL,QAAQ,EAAE;EACtC,MAAMM,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC7D,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCN,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEO,IAAI,CAAC;IACzC,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;EAClF;EAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;EAClC,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIS,KAAK,CAACC,IAAI,CAACT,KAAK,IAAIS,IAAI,CAACE,OAAO,IAAI,oBAAoB,CAAC;EACrE;EACA,OAAOF,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,KAAK;EACtD,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,yBAAyBkB,IAAI,QAAQC,GAAG,EAAE,CAAC;EACvF,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIS,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,OAAOX,QAAQ,CAACa,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeK,QAAQA,CAACC,WAAW,EAAE;EAC1C,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,MAAMrB,cAAc,CAAC,CAAC;IACxC,IAAI,CAACqB,SAAS,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,EAAE;MACxDuB,MAAM,EAAE,MAAM;MACdd,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IAEF,OAAOd,cAAc,CAACL,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAesB,gBAAgBA,CAACC,KAAK,EAAE;EAC5C,IAAI;IACF;IACA,MAAMN,SAAS,GAAG,MAAMrB,cAAc,CAAC,CAAC;IACxC,IAAI,CAACqB,SAAS,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,uBAAuB6B,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;IAC/F,OAAOrB,cAAc,CAACL,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeyB,gBAAgBA,CAACC,MAAM,EAAE;EAC7C,IAAI;IACF;IACA,MAAMT,SAAS,GAAG,MAAMrB,cAAc,CAAC,CAAC;IACxC,IAAI,CAACqB,SAAS,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgB+B,MAAM,EAAE,EAAE;MACpER,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,OAAOhB,cAAc,CAACL,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}