{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Desktop\\\\SRMLAB - Copy\\\\react-version\\\\src\\\\pages\\\\SlotBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotBooking = () => {\n  _s();\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: 'CSE',\n    date: '',\n    timeSlot: ''\n  });\n\n  // Delete booking form state\n  const [deleteEmail, setDeleteEmail] = useState('');\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Check API health on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    checkServerHealth();\n\n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    document.getElementById(\"date\").setAttribute(\"min\", today);\n  }, []);\n  useEffect(() => {\n    fetchUserBookings();\n  }, []);\n\n  // Handle booking form input changes\n  const handleBookingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Update the booking form state\n    setBookingForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Clear previous errors and success messages\n    setError('');\n    setSuccess('');\n\n    // Fetch available seats when date changes\n    if (name === 'date' && value) {\n      handleFetchAvailableSeats(value);\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    if (isHealthy && bookingForm.date) {\n      handleFetchAvailableSeats(bookingForm.date);\n    }\n  };\n\n  // Fetch available seats for selected date\n  const handleFetchAvailableSeats = async selectedDate => {\n    if (!selectedDate) {\n      alert(\"Please select a date to check available slots.\");\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    try {\n      const data = await fetchAvailableSeats(selectedDate);\n\n      // Transform data for the time slot dropdown with availability status only\n      const availableTimeSlots = [{\n        value: \"8:00-8:50\",\n        label: \"8:00 AM - 8:50 AM\",\n        available: data[\"8:00-8:50\"] > 0\n      }, {\n        value: \"9:00-9:50\",\n        label: \"9:00 AM - 9:50 AM\",\n        available: data[\"9:00-9:50\"] > 0\n      }, {\n        value: \"10:00-10:50\",\n        label: \"10:00 AM - 10:50 AM\",\n        available: data[\"10:00-10:50\"] > 0\n      }, {\n        value: \"11:00-11:50\",\n        label: \"11:00 AM - 11:50 AM\",\n        available: data[\"11:00-11:50\"] > 0\n      }, {\n        value: \"12:00-12:50\",\n        label: \"12:00 PM - 12:50 PM\",\n        available: data[\"12:00-12:50\"] > 0\n      }, {\n        value: \"2:00-2:50\",\n        label: \"2:00 PM - 2:50 PM\",\n        available: data[\"2:00-2:50\"] > 0\n      }, {\n        value: \"3:00-3:50\",\n        label: \"3:00 PM - 3:50 PM\",\n        available: data[\"3:00-3:50\"] > 0\n      }, {\n        value: \"4:00-4:50\",\n        label: \"4:00 PM - 4:50 PM\",\n        available: data[\"4:00-4:50\"] > 0\n      }];\n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async e => {\n    e.preventDefault();\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n\n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: '',\n        department: 'CSE',\n        date: '',\n        timeSlot: ''\n      });\n\n      // Clear time slots\n      setTimeSlots([]);\n\n      // Fetch available seats again to update the slots\n      handleFetchAvailableSeats(bookingForm.date);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle delete email change\n  const handleDeleteEmailChange = e => {\n    setDeleteEmail(e.target.value);\n    setError('');\n    setSuccess('');\n  };\n\n  // Fetch booked slots for a user\n  const handleFetchBookedSlots = async () => {\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    if (!deleteEmail) {\n      setError(\"Please enter your email to fetch booked slots.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!deleteEmail.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await fetchBookedSlots(deleteEmail);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for this email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n      setShowBookedSlots(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async bookingId => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n\n      // Refresh the booked slots\n      handleFetchBookedSlots();\n\n      // Fetch available seats again to update the slots\n      if (bookingForm.date) {\n        handleFetchAvailableSeats(bookingForm.date);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n    setSelectedSlot(null);\n    setError('');\n    setSuccess('');\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlot(slot);\n    setError('');\n    setSuccess('');\n  };\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedSlot) {\n      setError('Please select both date and time slot.');\n      return;\n    }\n    try {\n      var _user$user_metadata, _user$user_metadata2;\n      setLoading(true);\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        setError('Please sign in to book a slot.');\n        return;\n      }\n      const response = await fetch('/api/book-slot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          date: selectedDate,\n          timeSlot: selectedSlot,\n          email: user.email,\n          name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email,\n          department: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.department) || 'Not specified'\n        })\n      });\n      const data = await response.json();\n      setSuccess(data.message);\n      if (response.ok) {\n        // Reset selections after successful booking\n        setSelectedSlot(null);\n        // Refresh the bookings list\n        fetchUserBookings();\n      }\n    } catch (error) {\n      setError('Error booking slot. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchUserBookings = async () => {\n    try {\n      setLoading(true);\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        setMessage('Please sign in to view your bookings.');\n        return;\n      }\n      const response = await fetch(`/api/booked-slots?email=${user.email}`);\n      const data = await response.json();\n      if (response.ok) {\n        setBookedSlots(data);\n        setShowBookedSlots(true);\n      } else {\n        setMessage('Error fetching your bookings.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error fetching your bookings.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDeleteBooking = async bookingId => {\n    if (!window.confirm('Are you sure you want to delete this booking?')) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/delete-slot/${bookingId}`, {\n        method: 'DELETE'\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('Booking deleted successfully!');\n        // Refresh the bookings list\n        fetchUserBookings();\n      } else {\n        setMessage(data.error || 'Error deleting booking.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error deleting booking.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryConnection,\n        disabled: loading,\n        className: \"action-button\",\n        children: loading ? 'Trying to connect...' : 'Retry Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"lab-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Book Your Lab Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleBookingSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"facultyId\",\n          children: \"Faculty ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"facultyId\",\n          name: \"facultyId\",\n          value: bookingForm.facultyId,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your faculty ID\",\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Full Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: bookingForm.name,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your full name\",\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email (SRM):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: bookingForm.email,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"youremail@srmist.edu.in\",\n          disabled: loading || apiError,\n          pattern: \".*@srmist\\\\.edu\\\\.in\",\n          title: \"Please use an email ending with @srmist.edu.in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          children: \"Department:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"department\",\n          name: \"department\",\n          value: bookingForm.department,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CSE\",\n            children: \"Computer Science and Engineering\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ME\",\n            children: \"Mechanical Engineering\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"EEE\",\n            children: \"Electrical and Electronics Engineering\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CE\",\n            children: \"Civil Engineering\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"BT\",\n            children: \"Biotechnology\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: bookingForm.date,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"timeSlot\",\n          children: \"Time Slot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"timeSlot\",\n          name: \"timeSlot\",\n          value: bookingForm.timeSlot,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError || timeSlots.length === 0,\n          className: \"time-slot-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a slot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), loading && timeSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Loading available slots...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this) : timeSlots.length > 0 ? timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: slot.value,\n            disabled: !slot.available,\n            className: !slot.available ? 'slot-full' : '',\n            children: `${slot.label} (${slot.available ? 'Available' : 'Booked'})`\n          }, slot.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a date first\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"bookSlotButton\",\n            className: \"booking-button\",\n            disabled: loading || apiError,\n            children: loading ? 'Booking...' : 'Book Slot'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"delete-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Delete Your Booked Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"deleteBookingForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"deleteEmail\",\n          children: \"Email (SRM):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"deleteEmail\",\n          name: \"deleteEmail\",\n          value: deleteEmail,\n          onChange: handleDeleteEmailChange,\n          required: true,\n          placeholder: \"youremail@srmist.edu.in\",\n          disabled: loading || apiError,\n          pattern: \".*@srmist\\\\.edu\\\\.in\",\n          title: \"Please use an email ending with @srmist.edu.in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: \"fetchSlotsButton\",\n            onClick: handleFetchBookedSlots,\n            disabled: loading || apiError || !deleteEmail,\n            className: \"action-button\",\n            children: loading ? 'Fetching...' : 'Fetch Booked Slots'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bookedSlotsContainer\",\n        className: showBookedSlots ? '' : 'hidden',\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Booked Slots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"bookedSlotsList\",\n          children: bookedSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No slots booked.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this) : bookedSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Date: \", slot.date, \", Time Slot: \", slot.time_slot, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteBooking(slot.id),\n              disabled: loading || apiError,\n              className: \"delete-button\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 19\n            }, this)]\n          }, slot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n};\n_s(SlotBooking, \"7IxgQPO/P7jRtEpAg3kbiHsbtkU=\");\n_c = SlotBooking;\nexport default SlotBooking;\nvar _c;\n$RefreshReg$(_c, \"SlotBooking\");","map":{"version":3,"names":["React","useState","useEffect","fetchAvailableSeats","bookSlot","fetchBookedSlots","deleteBookedSlot","checkApiHealth","supabase","TimeSlots","jsxDEV","_jsxDEV","SlotBooking","_s","bookingForm","setBookingForm","facultyId","name","email","department","date","timeSlot","deleteEmail","setDeleteEmail","timeSlots","setTimeSlots","loading","setLoading","bookedSlots","setBookedSlots","showBookedSlots","setShowBookedSlots","error","setError","success","setSuccess","apiError","setApiError","selectedDate","setSelectedDate","selectedSlot","setSelectedSlot","message","setMessage","checkServerHealth","isHealthy","today","Date","toISOString","split","document","getElementById","setAttribute","fetchUserBookings","handleBookingChange","e","value","target","prev","handleFetchAvailableSeats","handleRetryConnection","alert","data","availableTimeSlots","label","available","includes","handleBookingSubmit","preventDefault","toLowerCase","endsWith","handleDeleteEmailChange","handleFetchBookedSlots","length","handleDeleteBookedSlot","bookingId","window","confirm","handleDateChange","handleSlotSelect","slot","handleBooking","_user$user_metadata","_user$user_metadata2","user","auth","getUser","response","fetch","method","headers","body","JSON","stringify","user_metadata","full_name","json","ok","console","handleDeleteBooking","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","onSubmit","htmlFor","type","onChange","required","placeholder","pattern","title","map","time_slot","_c","$RefreshReg$"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/pages/SlotBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth } from '../services/api';\r\nimport './SlotBooking.css';\r\nimport { supabase } from '../supabaseClient';\r\nimport TimeSlots from '../components/TimeSlots';\r\n\r\nconst SlotBooking = () => {\r\n  // Form state\r\n  const [bookingForm, setBookingForm] = useState({\r\n    facultyId: '',\r\n    name: '',\r\n    email: '',\r\n    department: 'CSE',\r\n    date: '',\r\n    timeSlot: ''\r\n  });\r\n\r\n  // Delete booking form state\r\n  const [deleteEmail, setDeleteEmail] = useState('');\r\n  \r\n  // UI state\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [bookedSlots, setBookedSlots] = useState([]);\r\n  const [showBookedSlots, setShowBookedSlots] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [apiError, setApiError] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [selectedSlot, setSelectedSlot] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Check API health on component mount\r\n  useEffect(() => {\r\n    const checkServerHealth = async () => {\r\n      const isHealthy = await checkApiHealth();\r\n      setApiError(!isHealthy);\r\n    };\r\n    \r\n    checkServerHealth();\r\n    \r\n    // Set the minimum date to today\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    document.getElementById(\"date\").setAttribute(\"min\", today);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchUserBookings();\r\n  }, []);\r\n\r\n  // Handle booking form input changes\r\n  const handleBookingChange = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    // Update the booking form state\r\n    setBookingForm(prev => ({ ...prev, [name]: value }));\r\n\r\n    // Clear previous errors and success messages\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    // Fetch available seats when date changes\r\n    if (name === 'date' && value) {\r\n      handleFetchAvailableSeats(value);\r\n    }\r\n  };\r\n\r\n  // Retry server connection\r\n  const handleRetryConnection = async () => {\r\n    setLoading(true);\r\n    const isHealthy = await checkApiHealth();\r\n    setApiError(!isHealthy);\r\n    setLoading(false);\r\n    \r\n    if (isHealthy && bookingForm.date) {\r\n      handleFetchAvailableSeats(bookingForm.date);\r\n    }\r\n  };\r\n\r\n  // Fetch available seats for selected date\r\n  const handleFetchAvailableSeats = async (selectedDate) => {\r\n    if (!selectedDate) {\r\n      alert(\"Please select a date to check available slots.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    setApiError(false);\r\n    \r\n    try {\r\n      const data = await fetchAvailableSeats(selectedDate);\r\n      \r\n      // Transform data for the time slot dropdown with availability status only\r\n      const availableTimeSlots = [\r\n        { value: \"8:00-8:50\", label: \"8:00 AM - 8:50 AM\", available: data[\"8:00-8:50\"] > 0 },\r\n        { value: \"9:00-9:50\", label: \"9:00 AM - 9:50 AM\", available: data[\"9:00-9:50\"] > 0 },\r\n        { value: \"10:00-10:50\", label: \"10:00 AM - 10:50 AM\", available: data[\"10:00-10:50\"] > 0 },\r\n        { value: \"11:00-11:50\", label: \"11:00 AM - 11:50 AM\", available: data[\"11:00-11:50\"] > 0 },\r\n        { value: \"12:00-12:50\", label: \"12:00 PM - 12:50 PM\", available: data[\"12:00-12:50\"] > 0 },\r\n        { value: \"2:00-2:50\", label: \"2:00 PM - 2:50 PM\", available: data[\"2:00-2:50\"] > 0 },\r\n        { value: \"3:00-3:50\", label: \"3:00 PM - 3:50 PM\", available: data[\"3:00-3:50\"] > 0 },\r\n        { value: \"4:00-4:50\", label: \"4:00 PM - 4:50 PM\", available: data[\"4:00-4:50\"] > 0 }\r\n      ];\r\n      \r\n      setTimeSlots(availableTimeSlots);\r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle booking form submission\r\n  const handleBookingSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Clear previous messages\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    // Validate form inputs\r\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\r\n      setError(\"Please fill out all fields before submitting.\");\r\n      return;\r\n    }\r\n\r\n    // Validate SRM email\r\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\r\n      setError(\"Please use an email ending with @srmist.edu.in\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const data = await bookSlot(bookingForm);\r\n      setSuccess(data.message);\r\n      \r\n      // Reset form only on successful booking\r\n      setBookingForm({\r\n        facultyId: '',\r\n        name: '',\r\n        email: '',\r\n        department: 'CSE',\r\n        date: '',\r\n        timeSlot: ''\r\n      });\r\n      \r\n      // Clear time slots\r\n      setTimeSlots([]);\r\n      \r\n      // Fetch available seats again to update the slots\r\n      handleFetchAvailableSeats(bookingForm.date);\r\n      \r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle delete email change\r\n  const handleDeleteEmailChange = (e) => {\r\n    setDeleteEmail(e.target.value);\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  // Fetch booked slots for a user\r\n  const handleFetchBookedSlots = async () => {\r\n    // Clear previous messages\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    if (!deleteEmail) {\r\n      setError(\"Please enter your email to fetch booked slots.\");\r\n      return;\r\n    }\r\n\r\n    // Validate SRM email\r\n    if (!deleteEmail.toLowerCase().endsWith('@srmist.edu.in')) {\r\n      setError(\"Please use an email ending with @srmist.edu.in\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const data = await fetchBookedSlots(deleteEmail);\r\n      setBookedSlots(data);\r\n      setShowBookedSlots(true);\r\n      \r\n      if (data.length === 0) {\r\n        setSuccess(\"No booked slots found for this email.\");\r\n      }\r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n      setShowBookedSlots(false);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete a booked slot\r\n  const handleDeleteBookedSlot = async (bookingId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    try {\r\n      const data = await deleteBookedSlot(bookingId);\r\n      setSuccess(data.message);\r\n      \r\n      // Refresh the booked slots\r\n      handleFetchBookedSlots();\r\n      \r\n      // Fetch available seats again to update the slots\r\n      if (bookingForm.date) {\r\n        handleFetchAvailableSeats(bookingForm.date);\r\n      }\r\n      \r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (e) => {\r\n    setSelectedDate(e.target.value);\r\n    setSelectedSlot(null);\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  const handleSlotSelect = (slot) => {\r\n    setSelectedSlot(slot);\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  const handleBooking = async () => {\r\n    if (!selectedDate || !selectedSlot) {\r\n      setError('Please select both date and time slot.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n\r\n      if (!user) {\r\n        setError('Please sign in to book a slot.');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('/api/book-slot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          date: selectedDate,\r\n          timeSlot: selectedSlot,\r\n          email: user.email,\r\n          name: user.user_metadata?.full_name || user.email,\r\n          department: user.user_metadata?.department || 'Not specified'\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setSuccess(data.message);\r\n      \r\n      if (response.ok) {\r\n        // Reset selections after successful booking\r\n        setSelectedSlot(null);\r\n        // Refresh the bookings list\r\n        fetchUserBookings();\r\n      }\r\n    } catch (error) {\r\n      setError('Error booking slot. Please try again.');\r\n      console.error('Booking error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchUserBookings = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) {\r\n        setMessage('Please sign in to view your bookings.');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`/api/booked-slots?email=${user.email}`);\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setBookedSlots(data);\r\n        setShowBookedSlots(true);\r\n      } else {\r\n        setMessage('Error fetching your bookings.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setMessage('Error fetching your bookings.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteBooking = async (bookingId) => {\r\n    if (!window.confirm('Are you sure you want to delete this booking?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`/api/delete-slot/${bookingId}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        setMessage('Booking deleted successfully!');\r\n        // Refresh the bookings list\r\n        fetchUserBookings();\r\n      } else {\r\n        setMessage(data.error || 'Error deleting booking.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setMessage('Error deleting booking.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      {apiError && (\r\n        <div className=\"api-error\">\r\n          <h3>Connection Error</h3>\r\n          <p>Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.</p>\r\n          <button \r\n            onClick={handleRetryConnection} \r\n            disabled={loading}\r\n            className=\"action-button\"\r\n          >\r\n            {loading ? 'Trying to connect...' : 'Retry Connection'}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      {success && (\r\n        <div className=\"success-message\">\r\n          {success}\r\n        </div>\r\n      )}\r\n      \r\n      {message && (\r\n        <div className={`message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`}>\r\n          {message}\r\n        </div>\r\n      )}\r\n      \r\n      <section id=\"lab-booking\">\r\n        <h2>Book Your Lab Slot</h2>\r\n        <form onSubmit={handleBookingSubmit}>\r\n          <label htmlFor=\"facultyId\">Faculty ID:</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"facultyId\" \r\n            name=\"facultyId\" \r\n            value={bookingForm.facultyId}\r\n            onChange={handleBookingChange}\r\n            required \r\n            placeholder=\"Enter your faculty ID\"\r\n            disabled={loading || apiError}\r\n          />\r\n\r\n          <label htmlFor=\"name\">Full Name:</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"name\" \r\n            name=\"name\" \r\n            value={bookingForm.name}\r\n            onChange={handleBookingChange}\r\n            required \r\n            placeholder=\"Enter your full name\"\r\n            disabled={loading || apiError}\r\n          />\r\n\r\n          <label htmlFor=\"email\">Email (SRM):</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            name=\"email\" \r\n            value={bookingForm.email}\r\n            onChange={handleBookingChange}\r\n            required \r\n            placeholder=\"youremail@srmist.edu.in\"\r\n            disabled={loading || apiError}\r\n            pattern=\".*@srmist\\.edu\\.in\"\r\n            title=\"Please use an email ending with @srmist.edu.in\"\r\n          />\r\n\r\n          <label htmlFor=\"department\">Department:</label>\r\n          <select \r\n            id=\"department\" \r\n            name=\"department\" \r\n            value={bookingForm.department}\r\n            onChange={handleBookingChange}\r\n            required\r\n            disabled={loading || apiError}\r\n          >\r\n            <option value=\"CSE\">Computer Science and Engineering</option>\r\n            <option value=\"ME\">Mechanical Engineering</option>\r\n            <option value=\"EEE\">Electrical and Electronics Engineering</option>\r\n            <option value=\"CE\">Civil Engineering</option>\r\n            <option value=\"BT\">Biotechnology</option>\r\n          </select>\r\n\r\n          <label htmlFor=\"date\">Date:</label>\r\n          <input \r\n            type=\"date\" \r\n            id=\"date\" \r\n            name=\"date\" \r\n            value={bookingForm.date}\r\n            onChange={handleBookingChange}\r\n            required \r\n            disabled={loading || apiError}\r\n          />\r\n\r\n          <label htmlFor=\"timeSlot\">Time Slot:</label>\r\n          <select \r\n            id=\"timeSlot\" \r\n            name=\"timeSlot\" \r\n            value={bookingForm.timeSlot}\r\n            onChange={handleBookingChange}\r\n            required\r\n            disabled={loading || apiError || timeSlots.length === 0}\r\n            className=\"time-slot-select\"\r\n          >\r\n            <option value=\"\">Select a slot</option>\r\n            {loading && timeSlots.length === 0 ? (\r\n              <option value=\"\">Loading available slots...</option>\r\n            ) : timeSlots.length > 0 ? (\r\n              timeSlots.map(slot => (\r\n                <option \r\n                  key={slot.value} \r\n                  value={slot.value}\r\n                  disabled={!slot.available}\r\n                  className={!slot.available ? 'slot-full' : ''}\r\n                >\r\n                  {`${slot.label} (${slot.available ? 'Available' : 'Booked'})`}\r\n                </option>\r\n              ))\r\n            ) : (\r\n              <option value=\"\">Select a date first</option>\r\n            )}\r\n          </select>\r\n\r\n          <div className=\"button-container\">\r\n            <button \r\n              type=\"submit\" \r\n              id=\"bookSlotButton\" \r\n              className=\"booking-button\"\r\n              disabled={loading || apiError}\r\n            >\r\n              {loading ? 'Booking...' : 'Book Slot'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n\r\n      <section id=\"delete-booking\">\r\n        <h2>Delete Your Booked Slot</h2>\r\n        <form id=\"deleteBookingForm\">\r\n          <label htmlFor=\"deleteEmail\">Email (SRM):</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"deleteEmail\" \r\n            name=\"deleteEmail\" \r\n            value={deleteEmail}\r\n            onChange={handleDeleteEmailChange}\r\n            required \r\n            placeholder=\"youremail@srmist.edu.in\"\r\n            disabled={loading || apiError}\r\n            pattern=\".*@srmist\\.edu\\.in\"\r\n            title=\"Please use an email ending with @srmist.edu.in\"\r\n          />\r\n\r\n          <div className=\"button-container\">\r\n            <button \r\n              type=\"button\" \r\n              id=\"fetchSlotsButton\" \r\n              onClick={handleFetchBookedSlots}\r\n              disabled={loading || apiError || !deleteEmail}\r\n              className=\"action-button\"\r\n            >\r\n              {loading ? 'Fetching...' : 'Fetch Booked Slots'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n\r\n        <div id=\"bookedSlotsContainer\" className={showBookedSlots ? '' : 'hidden'}>\r\n          <h3>Your Booked Slots</h3>\r\n          <ul id=\"bookedSlotsList\">\r\n            {bookedSlots.length === 0 ? (\r\n              <li>No slots booked.</li>\r\n            ) : (\r\n              bookedSlots.map(slot => (\r\n                <li key={slot.id}>\r\n                  Date: {slot.date}, Time Slot: {slot.time_slot}\r\n                  <button \r\n                    onClick={() => handleDeleteBooking(slot.id)}\r\n                    disabled={loading || apiError}\r\n                    className=\"delete-button\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </li>\r\n              ))\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default SlotBooking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}