{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Desktop\\\\SRMLAB - Copy\\\\react-version\\\\src\\\\pages\\\\SlotBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, API_BASE_URL } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotBooking = () => {\n  _s();\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    timeSlot: ''\n  });\n\n  // Delete booking form state\n  const [deleteEmail, setDeleteEmail] = useState('');\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Check API health on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    checkServerHealth();\n\n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    document.getElementById(\"date\").setAttribute(\"min\", today);\n  }, []);\n  useEffect(() => {\n    const initializeBookings = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          // Set both email and name in the booking form when user is authenticated\n          setBookingForm(prev => {\n            var _user$user_metadata;\n            return {\n              ...prev,\n              email: user.email,\n              name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email\n            };\n          });\n          await fetchUserBookings();\n        }\n      } catch (error) {\n        console.error('Error initializing bookings:', error);\n      }\n    };\n    initializeBookings();\n  }, []);\n\n  // Handle booking form input changes\n  const handleBookingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n\n    // Update the booking form state\n    setBookingForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Clear previous errors and success messages\n    setError('');\n    setSuccess('');\n\n    // Fetch available seats when date changes\n    if (name === 'date' && value) {\n      handleFetchAvailableSeats(value);\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    if (isHealthy && bookingForm.date) {\n      handleFetchAvailableSeats(bookingForm.date);\n    }\n  };\n\n  // Fetch available seats for selected date\n  const handleFetchAvailableSeats = async selectedDate => {\n    if (!selectedDate) {\n      alert(\"Please select a date to check available slots.\");\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    try {\n      const data = await fetchAvailableSeats(selectedDate);\n      console.log('Available slots response:', data);\n\n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [{\n        value: \"08:00-08:50\",\n        label: \"8:00 AM - 8:50 AM\",\n        available: data[\"08:00-08:50\"] === true\n      }, {\n        value: \"08:50-09:40\",\n        label: \"8:50 AM - 9:40 AM\",\n        available: data[\"08:50-09:40\"] === true\n      }, {\n        value: \"09:45-10:35\",\n        label: \"9:45 AM - 10:35 AM\",\n        available: data[\"09:45-10:35\"] === true\n      }, {\n        value: \"10:40-11:30\",\n        label: \"10:40 AM - 11:30 AM\",\n        available: data[\"10:40-11:30\"] === true\n      }, {\n        value: \"11:35-12:25\",\n        label: \"11:35 AM - 12:25 PM\",\n        available: data[\"11:35-12:25\"] === true\n      }, {\n        value: \"12:30-01:20\",\n        label: \"12:30 PM - 1:20 PM\",\n        available: data[\"12:30-01:20\"] === true\n      }, {\n        value: \"01:25-02:15\",\n        label: \"1:25 PM - 2:15 PM\",\n        available: data[\"01:25-02:15\"] === true\n      }, {\n        value: \"02:20-03:10\",\n        label: \"2:20 PM - 3:10 PM\",\n        available: data[\"02:20-03:10\"] === true\n      }, {\n        value: \"03:10-04:00\",\n        label: \"3:10 PM - 4:00 PM\",\n        available: data[\"03:10-04:00\"] === true\n      }, {\n        value: \"04:00-04:50\",\n        label: \"4:00 PM - 4:50 PM\",\n        available: data[\"04:00-04:50\"] === true\n      }];\n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async e => {\n    e.preventDefault();\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n\n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: '',\n        department: '',\n        date: '',\n        timeSlot: ''\n      });\n\n      // Clear time slots\n      setTimeSlots([]);\n\n      // Fetch available seats again to update the slots\n      handleFetchAvailableSeats(bookingForm.date);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle delete email change\n  const handleDeleteEmailChange = e => {\n    setDeleteEmail(e.target.value);\n    setError('');\n    setSuccess('');\n  };\n\n  // Fetch booked slots for a user\n  const handleFetchBookedSlots = async () => {\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    if (!deleteEmail) {\n      setError(\"Please enter your email to fetch booked slots.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!deleteEmail.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await fetchBookedSlots(deleteEmail);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for this email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n      setShowBookedSlots(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async bookingId => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n\n      // Refresh the booked slots\n      handleFetchBookedSlots();\n\n      // Fetch available seats again to update the slots\n      if (bookingForm.date) {\n        handleFetchAvailableSeats(bookingForm.date);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n    setSelectedSlot(null);\n    setError('');\n    setSuccess('');\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlot(slot);\n    setError('');\n    setSuccess('');\n  };\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedSlot) {\n      setError('Please select both date and time slot.');\n      return;\n    }\n    try {\n      var _user$user_metadata2, _user$user_metadata3, _user$user_metadata4;\n      setLoading(true);\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        setError('Please sign in to book a slot.');\n        return;\n      }\n      const response = await fetch(`${API_BASE_URL}/book-slot`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          date: selectedDate,\n          timeSlot: selectedSlot,\n          email: user.email,\n          facultyId: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.registration_number) || user.email,\n          name: ((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.full_name) || user.email,\n          department: ((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.department) || 'Not specified'\n        })\n      });\n\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Error booking slot.');\n        return;\n      }\n      setSuccess(data.message);\n\n      // Reset selections after successful booking\n      setSelectedSlot(null);\n      // Refresh the bookings list\n      fetchUserBookings();\n    } catch (error) {\n      setError('Error booking slot. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchUserBookings = async () => {\n    try {\n      setLoading(true);\n      setMessage('');\n      const {\n        data: {\n          user\n        },\n        error: authError\n      } = await supabase.auth.getUser();\n      if (authError) {\n        console.error('Auth error:', authError);\n        setMessage('Authentication error. Please sign in again.');\n        return;\n      }\n      if (!user) {\n        setMessage('Please sign in to view your bookings.');\n        return;\n      }\n      console.log('Fetching bookings for:', user.email);\n      const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(user.email)}`);\n\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        console.error('Server error:', data);\n        throw new Error(data.error || 'Failed to fetch bookings');\n      }\n      console.log('Fetched bookings:', data);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      if (data.length === 0) {\n        setMessage('No bookings found.');\n      }\n    } catch (error) {\n      console.error('Error in fetchUserBookings:', error);\n      if (error.message.includes('Failed to fetch') || error.message.includes('Backend server error')) {\n        setApiError(true);\n      } else {\n        setMessage(error.message || 'Error fetching your bookings.');\n      }\n      setShowBookedSlots(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDeleteBooking = async bookingId => {\n    if (!window.confirm('Are you sure you want to delete this booking?')) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/delete-slot/${bookingId}`, {\n        method: 'DELETE'\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('Booking deleted successfully!');\n        // Refresh the bookings list\n        fetchUserBookings();\n      } else {\n        setMessage(data.error || 'Error deleting booking.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error deleting booking.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryConnection,\n        disabled: loading,\n        className: \"action-button\",\n        children: loading ? 'Trying to connect...' : 'Retry Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"lab-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Book Your Lab Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleBookingSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"facultyId\",\n          children: \"Faculty ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"facultyId\",\n          name: \"facultyId\",\n          value: bookingForm.facultyId,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your faculty ID\",\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Full Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: bookingForm.name,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your full name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email (SRM):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: bookingForm.email,\n          readOnly: true,\n          disabled: true,\n          className: \"readonly-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          children: \"Department:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"department\",\n          name: \"department\",\n          value: bookingForm.department,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"NETWORKING\",\n            children: \"Networking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CINTEL\",\n            children: \"CINTEL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DSBS\",\n            children: \"DSBS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CTECH\",\n            children: \"CTECH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: bookingForm.date,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"timeSlot\",\n          children: \"Time Slot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"timeSlot\",\n          name: \"timeSlot\",\n          value: bookingForm.timeSlot,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError || timeSlots.length === 0,\n          className: \"time-slot-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a slot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 13\n          }, this), loading && timeSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Loading available slots...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this) : timeSlots.length > 0 ? timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: slot.value,\n            disabled: !slot.available,\n            className: !slot.available ? 'slot-full' : '',\n            children: `${slot.label} (${slot.available ? 'Available' : 'Booked'})`\n          }, slot.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a date first\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"bookSlotButton\",\n            className: \"booking-button\",\n            disabled: loading || apiError,\n            children: loading ? 'Booking...' : 'Book Slot'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"delete-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Delete Your Booked Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"deleteBookingForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"deleteEmail\",\n          children: \"Email (SRM):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"deleteEmail\",\n          name: \"deleteEmail\",\n          value: deleteEmail,\n          onChange: handleDeleteEmailChange,\n          required: true,\n          placeholder: \"youremail@srmist.edu.in\",\n          disabled: loading || apiError,\n          pattern: \".*@srmist\\\\.edu\\\\.in\",\n          title: \"Please use an email ending with @srmist.edu.in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: \"fetchSlotsButton\",\n            onClick: handleFetchBookedSlots,\n            disabled: loading || apiError || !deleteEmail,\n            className: \"action-button\",\n            children: loading ? 'Fetching...' : 'Fetch Booked Slots'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bookedSlotsContainer\",\n        className: showBookedSlots ? '' : 'hidden',\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Booked Slots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"bookedSlotsList\",\n          children: bookedSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No slots booked.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this) : bookedSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Date: \", slot.date, \", Time Slot: \", slot.time_slot, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteBooking(slot.id),\n              disabled: loading || apiError,\n              className: \"delete-button\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 19\n            }, this)]\n          }, slot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n};\n_s(SlotBooking, \"YVZsjomOSI11qqp34TSuMe0DlcY=\");\n_c = SlotBooking;\nexport default SlotBooking;\nvar _c;\n$RefreshReg$(_c, \"SlotBooking\");","map":{"version":3,"names":["React","useState","useEffect","fetchAvailableSeats","bookSlot","fetchBookedSlots","deleteBookedSlot","checkApiHealth","API_BASE_URL","supabase","TimeSlots","jsxDEV","_jsxDEV","SlotBooking","_s","bookingForm","setBookingForm","facultyId","name","email","department","date","timeSlot","deleteEmail","setDeleteEmail","timeSlots","setTimeSlots","loading","setLoading","bookedSlots","setBookedSlots","showBookedSlots","setShowBookedSlots","error","setError","success","setSuccess","apiError","setApiError","selectedDate","setSelectedDate","selectedSlot","setSelectedSlot","message","setMessage","checkServerHealth","isHealthy","today","Date","toISOString","split","document","getElementById","setAttribute","initializeBookings","data","user","auth","getUser","prev","_user$user_metadata","user_metadata","full_name","fetchUserBookings","console","handleBookingChange","e","value","target","handleFetchAvailableSeats","handleRetryConnection","alert","log","availableTimeSlots","label","available","includes","handleBookingSubmit","preventDefault","toLowerCase","endsWith","handleDeleteEmailChange","handleFetchBookedSlots","length","handleDeleteBookedSlot","bookingId","window","confirm","handleDateChange","handleSlotSelect","slot","handleBooking","_user$user_metadata2","_user$user_metadata3","_user$user_metadata4","response","fetch","method","headers","body","JSON","stringify","registration_number","contentType","get","text","Error","json","ok","authError","encodeURIComponent","handleDeleteBooking","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","onSubmit","htmlFor","type","onChange","required","placeholder","readOnly","map","pattern","title","time_slot","_c","$RefreshReg$"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/pages/SlotBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, API_BASE_URL } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\n\nconst SlotBooking = () => {\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    timeSlot: ''\n  });\n\n  // Delete booking form state\n  const [deleteEmail, setDeleteEmail] = useState('');\n  \n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Check API health on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    \n    checkServerHealth();\n    \n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    document.getElementById(\"date\").setAttribute(\"min\", today);\n  }, []);\n\n  useEffect(() => {\n    const initializeBookings = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          // Set both email and name in the booking form when user is authenticated\n          setBookingForm(prev => ({\n            ...prev,\n            email: user.email,\n            name: user.user_metadata?.full_name || user.email\n          }));\n          await fetchUserBookings();\n        }\n      } catch (error) {\n        console.error('Error initializing bookings:', error);\n      }\n    };\n\n    initializeBookings();\n  }, []);\n\n  // Handle booking form input changes\n  const handleBookingChange = (e) => {\n    const { name, value } = e.target;\n    \n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n    \n    // Update the booking form state\n    setBookingForm(prev => ({ ...prev, [name]: value }));\n\n    // Clear previous errors and success messages\n    setError('');\n    setSuccess('');\n\n    // Fetch available seats when date changes\n    if (name === 'date' && value) {\n      handleFetchAvailableSeats(value);\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    \n    if (isHealthy && bookingForm.date) {\n      handleFetchAvailableSeats(bookingForm.date);\n    }\n  };\n\n  // Fetch available seats for selected date\n  const handleFetchAvailableSeats = async (selectedDate) => {\n    if (!selectedDate) {\n      alert(\"Please select a date to check available slots.\");\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    \n    try {\n      const data = await fetchAvailableSeats(selectedDate);\n      console.log('Available slots response:', data);\n      \n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [\n        { value: \"08:00-08:50\", label: \"8:00 AM - 8:50 AM\", available: data[\"08:00-08:50\"] === true },\n        { value: \"08:50-09:40\", label: \"8:50 AM - 9:40 AM\", available: data[\"08:50-09:40\"] === true },\n        { value: \"09:45-10:35\", label: \"9:45 AM - 10:35 AM\", available: data[\"09:45-10:35\"] === true },\n        { value: \"10:40-11:30\", label: \"10:40 AM - 11:30 AM\", available: data[\"10:40-11:30\"] === true },\n        { value: \"11:35-12:25\", label: \"11:35 AM - 12:25 PM\", available: data[\"11:35-12:25\"] === true },\n        { value: \"12:30-01:20\", label: \"12:30 PM - 1:20 PM\", available: data[\"12:30-01:20\"] === true },\n        { value: \"01:25-02:15\", label: \"1:25 PM - 2:15 PM\", available: data[\"01:25-02:15\"] === true },\n        { value: \"02:20-03:10\", label: \"2:20 PM - 3:10 PM\", available: data[\"02:20-03:10\"] === true },\n        { value: \"03:10-04:00\", label: \"3:10 PM - 4:00 PM\", available: data[\"03:10-04:00\"] === true },\n        { value: \"04:00-04:50\", label: \"4:00 PM - 4:50 PM\", available: data[\"04:00-04:50\"] === true }\n      ];\n      \n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    \n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n      \n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: '',\n        department: '',\n        date: '',\n        timeSlot: ''\n      });\n      \n      // Clear time slots\n      setTimeSlots([]);\n      \n      // Fetch available seats again to update the slots\n      handleFetchAvailableSeats(bookingForm.date);\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle delete email change\n  const handleDeleteEmailChange = (e) => {\n    setDeleteEmail(e.target.value);\n    setError('');\n    setSuccess('');\n  };\n\n  // Fetch booked slots for a user\n  const handleFetchBookedSlots = async () => {\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    \n    if (!deleteEmail) {\n      setError(\"Please enter your email to fetch booked slots.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!deleteEmail.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await fetchBookedSlots(deleteEmail);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      \n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for this email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n      setShowBookedSlots(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async (bookingId) => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n      \n      // Refresh the booked slots\n      handleFetchBookedSlots();\n      \n      // Fetch available seats again to update the slots\n      if (bookingForm.date) {\n        handleFetchAvailableSeats(bookingForm.date);\n      }\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDateChange = (e) => {\n    setSelectedDate(e.target.value);\n    setSelectedSlot(null);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleSlotSelect = (slot) => {\n    setSelectedSlot(slot);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedSlot) {\n      setError('Please select both date and time slot.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n\n      if (!user) {\n        setError('Please sign in to book a slot.');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/book-slot`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          date: selectedDate,\n          timeSlot: selectedSlot,\n          email: user.email,\n          facultyId: user.user_metadata?.registration_number || user.email,\n          name: user.user_metadata?.full_name || user.email,\n          department: user.user_metadata?.department || 'Not specified'\n        }),\n      });\n\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        setError(data.message || 'Error booking slot.');\n        return;\n      }\n      \n      setSuccess(data.message);\n      \n      // Reset selections after successful booking\n      setSelectedSlot(null);\n      // Refresh the bookings list\n      fetchUserBookings();\n    } catch (error) {\n      setError('Error booking slot. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUserBookings = async () => {\n    try {\n      setLoading(true);\n      setMessage('');\n      \n      const { data: { user }, error: authError } = await supabase.auth.getUser();\n      \n      if (authError) {\n        console.error('Auth error:', authError);\n        setMessage('Authentication error. Please sign in again.');\n        return;\n      }\n      \n      if (!user) {\n        setMessage('Please sign in to view your bookings.');\n        return;\n      }\n\n      console.log('Fetching bookings for:', user.email);\n      const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(user.email)}`);\n      \n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        console.error('Server error:', data);\n        throw new Error(data.error || 'Failed to fetch bookings');\n      }\n      \n      console.log('Fetched bookings:', data);\n      \n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      \n      if (data.length === 0) {\n        setMessage('No bookings found.');\n      }\n    } catch (error) {\n      console.error('Error in fetchUserBookings:', error);\n      if (error.message.includes('Failed to fetch') || error.message.includes('Backend server error')) {\n        setApiError(true);\n      } else {\n        setMessage(error.message || 'Error fetching your bookings.');\n      }\n      setShowBookedSlots(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteBooking = async (bookingId) => {\n    if (!window.confirm('Are you sure you want to delete this booking?')) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/delete-slot/${bookingId}`, {\n        method: 'DELETE'\n      });\n\n      const data = await response.json();\n      \n      if (response.ok) {\n        setMessage('Booking deleted successfully!');\n        // Refresh the bookings list\n        fetchUserBookings();\n      } else {\n        setMessage(data.error || 'Error deleting booking.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error deleting booking.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main>\n      {apiError && (\n        <div className=\"api-error\">\n          <h3>Connection Error</h3>\n          <p>Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.</p>\n          <button \n            onClick={handleRetryConnection} \n            disabled={loading}\n            className=\"action-button\"\n          >\n            {loading ? 'Trying to connect...' : 'Retry Connection'}\n          </button>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-message\">\n          {success}\n        </div>\n      )}\n      \n      {message && (\n        <div className={`message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`}>\n          {message}\n        </div>\n      )}\n      \n      <section id=\"lab-booking\">\n        <h2>Book Your Lab Slot</h2>\n        <form onSubmit={handleBookingSubmit}>\n          <label htmlFor=\"facultyId\">Faculty ID:</label>\n          <input \n            type=\"text\" \n            id=\"facultyId\" \n            name=\"facultyId\" \n            value={bookingForm.facultyId}\n            onChange={handleBookingChange}\n            required \n            placeholder=\"Enter your faculty ID\"\n            disabled={loading || apiError}\n          />\n\n          <label htmlFor=\"name\">Full Name:</label>\n          <input \n            type=\"text\" \n            id=\"name\" \n            name=\"name\" \n            value={bookingForm.name}\n            onChange={handleBookingChange}\n            required\n            placeholder=\"Enter your full name\"\n          />\n\n          <label htmlFor=\"email\">Email (SRM):</label>\n          <input \n            type=\"email\" \n            id=\"email\" \n            name=\"email\" \n            value={bookingForm.email}\n            readOnly\n            disabled\n            className=\"readonly-input\"\n          />\n\n          <label htmlFor=\"department\">Department:</label>\n          <select \n            id=\"department\" \n            name=\"department\" \n            value={bookingForm.department}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError}\n          >\n            <option value=\"\">Select Department</option>\n            <option value=\"NETWORKING\">Networking</option>\n            <option value=\"CINTEL\">CINTEL</option>\n            <option value=\"DSBS\">DSBS</option>\n            <option value=\"CTECH\">CTECH</option>\n          </select>\n\n          <label htmlFor=\"date\">Date:</label>\n          <input \n            type=\"date\" \n            id=\"date\" \n            name=\"date\" \n            value={bookingForm.date}\n            onChange={handleBookingChange}\n            required \n            disabled={loading || apiError}\n          />\n\n          <label htmlFor=\"timeSlot\">Time Slot:</label>\n          <select \n            id=\"timeSlot\" \n            name=\"timeSlot\" \n            value={bookingForm.timeSlot}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError || timeSlots.length === 0}\n            className=\"time-slot-select\"\n          >\n            <option value=\"\">Select a slot</option>\n            {loading && timeSlots.length === 0 ? (\n              <option value=\"\">Loading available slots...</option>\n            ) : timeSlots.length > 0 ? (\n              timeSlots.map(slot => (\n                <option \n                  key={slot.value} \n                  value={slot.value}\n                  disabled={!slot.available}\n                  className={!slot.available ? 'slot-full' : ''}\n                >\n                  {`${slot.label} (${slot.available ? 'Available' : 'Booked'})`}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">Select a date first</option>\n            )}\n          </select>\n\n          <div className=\"button-container\">\n            <button \n              type=\"submit\" \n              id=\"bookSlotButton\" \n              className=\"booking-button\"\n              disabled={loading || apiError}\n            >\n              {loading ? 'Booking...' : 'Book Slot'}\n            </button>\n          </div>\n        </form>\n      </section>\n\n      <section id=\"delete-booking\">\n        <h2>Delete Your Booked Slot</h2>\n        <form id=\"deleteBookingForm\">\n          <label htmlFor=\"deleteEmail\">Email (SRM):</label>\n          <input \n            type=\"email\" \n            id=\"deleteEmail\" \n            name=\"deleteEmail\" \n            value={deleteEmail}\n            onChange={handleDeleteEmailChange}\n            required \n            placeholder=\"youremail@srmist.edu.in\"\n            disabled={loading || apiError}\n            pattern=\".*@srmist\\.edu\\.in\"\n            title=\"Please use an email ending with @srmist.edu.in\"\n          />\n\n          <div className=\"button-container\">\n            <button \n              type=\"button\" \n              id=\"fetchSlotsButton\" \n              onClick={handleFetchBookedSlots}\n              disabled={loading || apiError || !deleteEmail}\n              className=\"action-button\"\n            >\n              {loading ? 'Fetching...' : 'Fetch Booked Slots'}\n            </button>\n          </div>\n        </form>\n\n        <div id=\"bookedSlotsContainer\" className={showBookedSlots ? '' : 'hidden'}>\n          <h3>Your Booked Slots</h3>\n          <ul id=\"bookedSlotsList\">\n            {bookedSlots.length === 0 ? (\n              <li>No slots booked.</li>\n            ) : (\n              bookedSlots.map(slot => (\n                <li key={slot.id}>\n                  Date: {slot.date}, Time Slot: {slot.time_slot}\n                  <button \n                    onClick={() => handleDeleteBooking(slot.id)}\n                    disabled={loading || apiError}\n                    className=\"delete-button\"\n                  >\n                    Delete\n                  </button>\n                </li>\n              ))\n            )}\n          </ul>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default SlotBooking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}