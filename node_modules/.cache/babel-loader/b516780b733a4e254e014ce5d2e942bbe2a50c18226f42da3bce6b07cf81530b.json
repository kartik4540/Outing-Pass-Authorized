{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Downloads\\\\Slot-Booking\\\\frontend-supabase\\\\src\\\\pages\\\\SlotBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, fetchPendingBookings, handleBookingAction, fetchDayOrder } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotBooking = () => {\n  _s();\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    dayOrder: '',\n    lab: '',\n    timeSlots: [] // Changed from timeSlot to timeSlots array\n  });\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]); // Changed from selectedSlot to selectedSlots array\n  const [message, setMessage] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [pendingBookings, setPendingBookings] = useState([]);\n  const [user, setUser] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [bookingCounts, setBookingCounts] = useState({\n    waiting: 0,\n    confirmed: 0,\n    rejected: 0\n  });\n\n  // Check API health and initialize user on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    const initializeUser = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          setUser(user);\n          const userIsAdmin = isAdminUser(user.email);\n          setIsAdmin(userIsAdmin);\n          setBookingForm(prev => {\n            var _user$user_metadata;\n            return {\n              ...prev,\n              email: user.email,\n              name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email\n            };\n          });\n          if (user.email) {\n            await fetchUserBookings(user.email);\n            if (userIsAdmin) {\n              await fetchPendingBookingsData();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing user:', error);\n      }\n    };\n    checkServerHealth();\n    initializeUser();\n\n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    const dateInput = document.getElementById(\"date\");\n    if (dateInput) {\n      dateInput.setAttribute(\"min\", today);\n    }\n  }, []);\n\n  // Function to check if a user is admin\n  const isAdminUser = email => {\n    const adminEmails = ['km5260@srmist.edu.in'];\n    return adminEmails.includes(email);\n  };\n\n  // Utility function to check if a date is a weekend\n  const isWeekend = date => {\n    const day = new Date(date).getDay();\n    // 0 is Sunday, 6 is Saturday\n    return day === 0 || day === 6;\n  };\n\n  // Function to provide a descriptive date string\n  const formatDateForDisplay = dateString => {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    const isWeekendDay = day === 0 || day === 6;\n    const formattedDate = date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\n  };\n\n  // Function to check if a date should be disabled (weekends)\n  const isDateDisabled = date => {\n    const currentDate = new Date(date);\n    return currentDate.getDay() === 0 || currentDate.getDay() === 6; // 0 is Sunday, 6 is Saturday\n  };\n\n  // Function to get the next available date (skip weekends)\n  const getNextAvailableDate = date => {\n    const currentDate = new Date(date);\n    while (isDateDisabled(currentDate)) {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return currentDate.toISOString().split('T')[0];\n  };\n\n  // Handle booking form input changes\n  const handleBookingChange = async e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Handle date changes with weekend validation\n    if (name === 'date' && value) {\n      if (isDateDisabled(value)) {\n        const nextAvailableDate = getNextAvailableDate(value);\n        setError('Weekends are not available for booking. Next available date selected.');\n\n        // Update the date input to the next available date\n        e.target.value = nextAvailableDate;\n        setBookingForm(prev => ({\n          ...prev,\n          date: nextAvailableDate,\n          lab: '',\n          timeSlots: []\n        }));\n        setTimeSlots([]);\n        setSelectedSlots([]);\n        return;\n      }\n      setBookingForm(prev => ({\n        ...prev,\n        date: value,\n        lab: '',\n        // Reset lab selection when date changes\n        timeSlots: [] // Reset time slots when date changes\n      }));\n      setTimeSlots([]); // Clear time slots\n      setSelectedSlots([]); // Clear selected slots when date changes\n    } else {\n      // Update form state for other fields\n      setBookingForm(prev => {\n        const updatedForm = {\n          ...prev,\n          [name]: value\n        };\n\n        // If changing day order, reset lab and time slots\n        if (name === 'dayOrder') {\n          updatedForm.lab = '';\n          updatedForm.timeSlots = [];\n          setTimeSlots([]);\n          setSelectedSlots([]);\n        }\n\n        // Handle lab selection or day order changes\n        if ((name === 'lab' || name === 'dayOrder') && updatedForm.date) {\n          // Only fetch available seats if we have both lab and day order\n          if (updatedForm.lab && updatedForm.dayOrder) {\n            handleFetchAvailableSeats(updatedForm.date, updatedForm.lab);\n          }\n        }\n        return updatedForm;\n      });\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    if (isHealthy && bookingForm.date && bookingForm.lab && bookingForm.dayOrder) {\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n    }\n  };\n\n  // Fetch available seats for selected date and lab\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\n    if (!selectedDate || !selectedLab || !bookingForm.dayOrder) {\n      setTimeSlots([]);\n      setSelectedSlots([]);\n      return;\n    }\n    setLoading(true);\n    // Store current error message and selected slots\n    const currentError = error;\n    const currentSelectedSlots = selectedSlots;\n    setApiError(false);\n    try {\n      const data = await fetchAvailableSeats(selectedDate, selectedLab, bookingForm.dayOrder);\n      console.log('Available slots response:', data);\n\n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [{\n        value: \"08:00-08:50\",\n        label: \"8:00 AM - 8:50 AM\",\n        available: data[\"08:00-08:50\"] === true\n      }, {\n        value: \"08:50-09:40\",\n        label: \"8:50 AM - 9:40 AM\",\n        available: data[\"08:50-09:40\"] === true\n      }, {\n        value: \"09:45-10:35\",\n        label: \"9:45 AM - 10:35 AM\",\n        available: data[\"09:45-10:35\"] === true\n      }, {\n        value: \"10:40-11:30\",\n        label: \"10:40 AM - 11:30 AM\",\n        available: data[\"10:40-11:30\"] === true\n      }, {\n        value: \"11:35-12:25\",\n        label: \"11:35 AM - 12:25 PM\",\n        available: data[\"11:35-12:25\"] === true\n      }, {\n        value: \"12:30-01:20\",\n        label: \"12:30 PM - 1:20 PM\",\n        available: data[\"12:30-01:20\"] === true\n      }, {\n        value: \"01:25-02:15\",\n        label: \"1:25 PM - 2:15 PM\",\n        available: data[\"01:25-02:15\"] === true\n      }, {\n        value: \"02:20-03:10\",\n        label: \"2:20 PM - 3:10 PM\",\n        available: data[\"02:20-03:10\"] === true\n      }, {\n        value: \"03:10-04:00\",\n        label: \"3:10 PM - 4:00 PM\",\n        available: data[\"03:10-04:00\"] === true\n      }, {\n        value: \"04:00-04:50\",\n        label: \"4:00 PM - 4:50 PM\",\n        available: data[\"04:00-04:50\"] === true\n      }];\n\n      // Update time slots\n      setTimeSlots(availableTimeSlots);\n\n      // Remove any selected slots that are no longer available\n      setSelectedSlots(prevSlots => prevSlots.filter(slot => availableTimeSlots.find(ts => ts.value === slot && ts.available)));\n\n      // Restore error message if it exists\n      if (currentError) {\n        setError(currentError);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      // Validate required fields\n      if (!bookingForm.date || !bookingForm.lab || !bookingForm.timeSlots || bookingForm.timeSlots.length === 0) {\n        setError('Please select a date, lab, and at least one time slot.');\n        return;\n      }\n\n      // Create booking data\n      const bookingData = {\n        ...bookingForm,\n        timeSlots: bookingForm.timeSlots // Ensure timeSlots is an array\n      };\n\n      // Make the booking request\n      const response = await bookSlot(bookingData);\n      if (response.success) {\n        setSuccess('Booking request submitted successfully!');\n        // Clear form\n        setBookingForm(prev => ({\n          ...prev,\n          date: '',\n          lab: '',\n          timeSlots: []\n        }));\n        setSelectedSlots([]);\n        setTimeSlots([]);\n\n        // Refresh booked slots\n        if (user !== null && user !== void 0 && user.email) {\n          await fetchUserBookings(user.email);\n        }\n      } else {\n        setError(response.error || 'Failed to create booking. Please try again.');\n      }\n    } catch (error) {\n      console.error('Booking error:', error);\n      setError(error.message || 'Failed to create booking. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked slots for a user\n  const fetchUserBookings = async email => {\n    try {\n      const bookings = await fetchBookedSlots(email);\n      setBookedSlots(bookings);\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      setError('Failed to fetch your bookings. Please try again later.');\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async bookingId => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n\n      // Refresh the booked slots using the email from the form\n      if (bookingForm.email) {\n        fetchUserBookings(bookingForm.email);\n      }\n\n      // Fetch available seats again to update the slots\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlots(prevSlots => {\n      const newSlots = prevSlots.includes(slot) ? prevSlots.filter(s => s !== slot) // Remove slot if already selected\n      : [...prevSlots, slot]; // Add slot if not selected\n\n      // Update bookingForm.timeSlots as well\n      setBookingForm(prev => ({\n        ...prev,\n        timeSlots: newSlots\n      }));\n      return newSlots;\n    });\n    setError('');\n    setSuccess('');\n  };\n\n  // Function to fetch pending bookings (admin only)\n  const fetchPendingBookingsData = async () => {\n    try {\n      setLoading(true);\n      const pendingBookings = await fetchPendingBookings(user.email);\n      setPendingBookings(pendingBookings);\n    } catch (error) {\n      console.error('Error fetching pending bookings:', error);\n      setError('Failed to fetch pending bookings. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to handle booking status change (confirm/reject)\n  const handleBookingStatusChange = async (bookingId, action) => {\n    try {\n      setLoading(true);\n      await handleBookingAction(bookingId, action, user.email);\n\n      // Refetch pending bookings to update the UI\n      await fetchPendingBookingsData();\n      setMessage(`Booking ${action === 'confirm' ? 'confirmed' : 'rejected'} successfully`);\n    } catch (error) {\n      console.error(`Error ${action}ing booking:`, error);\n      setError(`Failed to ${action} booking. Please try again later.`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleStatusFilter = status => {\n    setSelectedStatus(status);\n    if (user !== null && user !== void 0 && user.email) {\n      fetchUserBookings(user.email);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-booking-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lab Slot Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleBookingSubmit,\n      className: \"booking-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"facultyId\",\n        children: \"Faculty ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"facultyId\",\n        name: \"facultyId\",\n        value: bookingForm.facultyId,\n        onChange: handleBookingChange,\n        required: true,\n        placeholder: \"Enter your faculty ID\",\n        disabled: loading || apiError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Full Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: bookingForm.name,\n        onChange: handleBookingChange,\n        required: true,\n        placeholder: \"Enter your full name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email (SRM):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        value: bookingForm.email,\n        readOnly: true,\n        disabled: true,\n        className: \"readonly-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"department\",\n        children: \"Department:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"department\",\n        name: \"department\",\n        value: bookingForm.department,\n        onChange: handleBookingChange,\n        required: true,\n        disabled: loading || apiError,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"NETWORKING\",\n          children: \"Networking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"CINTEL\",\n          children: \"CINTEL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DSBS\",\n          children: \"DSBS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"CTECH\",\n          children: \"CTECH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: bookingForm.date,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          min: new Date().toISOString().split('T')[0],\n          onKeyDown: e => e.preventDefault() // Prevent manual input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dayOrder\",\n          children: \"Day Order:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dayOrder\",\n          name: \"dayOrder\",\n          value: bookingForm.dayOrder || '',\n          onChange: handleBookingChange,\n          required: true,\n          className: \"day-order-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Day Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"Day 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"Day 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"Day 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"Day 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"Day 5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-order-note\",\n          style: {\n            fontSize: '0.85rem',\n            color: '#666',\n            marginTop: '5px',\n            padding: '8px',\n            backgroundColor: '#fff3e0',\n            borderRadius: '4px',\n            border: '1px solid #ffe0b2'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Important:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this), \" Please select the correct day order for your chosen date. Available slots will change based on the day order schedule.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lab\",\n        children: \"Select Lab:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"lab\",\n        name: \"lab\",\n        value: bookingForm.lab,\n        onChange: handleBookingChange,\n        required: true,\n        disabled: loading || apiError,\n        className: \"lab-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Lab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB A\",\n          children: \"LAB A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB B\",\n          children: \"LAB B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB C\",\n          children: \"LAB C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB D\",\n          children: \"LAB D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-slots-grid\",\n        children: loading && timeSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading available slots...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this) : timeSlots.length > 0 ? timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `time-slot-item ${!slot.available ? 'disabled' : ''} ${selectedSlots.includes(slot.value) ? 'selected' : ''}`,\n          onClick: () => slot.available && handleSlotSelect(slot.value),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot-time\",\n            children: slot.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot-status\",\n            children: slot.available ? 'Available' : 'Booked'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this)]\n        }, slot.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Select a date and lab first\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-slots\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Selected Time Slots:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), selectedSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-slots-list\",\n          children: selectedSlots.map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-slot-item\",\n            children: [slot, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-slot\",\n              onClick: () => handleSlotSelect(slot),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 19\n            }, this)]\n          }, slot, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No slots selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"booking-button\",\n          disabled: loading || apiError || selectedSlots.length === 0,\n          children: loading ? 'Booking...' : `Book ${selectedSlots.length} Slot${selectedSlots.length !== 1 ? 's' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryConnection,\n        disabled: loading,\n        className: \"action-button\",\n        children: loading ? 'Trying to connect...' : 'Retry Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      style: {\n        position: 'sticky',\n        top: '20px',\n        backgroundColor: '#ffebee',\n        color: '#c62828',\n        padding: '15px',\n        borderRadius: '5px',\n        marginBottom: '20px',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n        zIndex: 1000,\n        whiteSpace: 'pre-line' // This will preserve line breaks in the error message\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 9\n    }, this), showBookedSlots && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booked-slots-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Bookings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-filter-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `status-button ${selectedStatus === 'all' ? 'active' : ''}`,\n          onClick: () => handleStatusFilter('all'),\n          children: [\"All Bookings (\", bookingCounts.waiting + bookingCounts.confirmed + bookingCounts.rejected, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `status-button ${selectedStatus === 'waiting' ? 'active' : ''}`,\n          onClick: () => handleStatusFilter('waiting'),\n          children: [\"Waiting (\", bookingCounts.waiting, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `status-button ${selectedStatus === 'confirmed' ? 'active' : ''}`,\n          onClick: () => handleStatusFilter('confirmed'),\n          children: [\"Confirmed (\", bookingCounts.confirmed, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `status-button ${selectedStatus === 'rejected' ? 'active' : ''}`,\n          onClick: () => handleStatusFilter('rejected'),\n          children: [\"Rejected (\", bookingCounts.rejected, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 11\n      }, this), bookedSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"booked-slots-list\",\n        children: bookedSlots.map(booking => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `booking-card ${booking.status}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booking-status-badge\",\n            children: booking.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booking-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Booking Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 24\n              }, this), \" \", booking.formatted_date || booking.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Lab:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 672,\n                columnNumber: 24\n              }, this), \" \", booking.lab]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Time Slot:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 24\n              }, this), \" \", booking.time_slot]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 24\n              }, this), \" \", booking.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 19\n          }, this), booking.status === 'waiting' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => handleDeleteBookedSlot(booking.id),\n            disabled: loading,\n            children: \"Cancel Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 21\n          }, this)]\n        }, booking.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-bookings\",\n        children: selectedStatus === 'all' ? 'You have no bookings yet' : `You have no ${selectedStatus} bookings`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n_s(SlotBooking, \"NE8pMO11R5aqAoGU3MSs3JHq7d8=\");\n_c = SlotBooking;\nexport default SlotBooking;\nvar _c;\n$RefreshReg$(_c, \"SlotBooking\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useLocation","useNavigate","fetchAvailableSeats","bookSlot","fetchBookedSlots","deleteBookedSlot","checkApiHealth","fetchPendingBookings","handleBookingAction","fetchDayOrder","supabase","TimeSlots","jsxDEV","_jsxDEV","SlotBooking","_s","bookingForm","setBookingForm","facultyId","name","email","department","date","dayOrder","lab","timeSlots","setTimeSlots","loading","setLoading","bookedSlots","setBookedSlots","showBookedSlots","setShowBookedSlots","error","setError","success","setSuccess","apiError","setApiError","selectedDate","setSelectedDate","selectedSlots","setSelectedSlots","message","setMessage","isAdmin","setIsAdmin","pendingBookings","setPendingBookings","user","setUser","selectedStatus","setSelectedStatus","bookingCounts","setBookingCounts","waiting","confirmed","rejected","checkServerHealth","isHealthy","initializeUser","data","auth","getUser","userIsAdmin","isAdminUser","prev","_user$user_metadata","user_metadata","full_name","fetchUserBookings","fetchPendingBookingsData","console","today","Date","toISOString","split","dateInput","document","getElementById","setAttribute","adminEmails","includes","isWeekend","day","getDay","formatDateForDisplay","dateString","isWeekendDay","formattedDate","toLocaleDateString","weekday","year","month","isDateDisabled","currentDate","getNextAvailableDate","setDate","getDate","handleBookingChange","e","value","target","nextAvailableDate","updatedForm","handleFetchAvailableSeats","handleRetryConnection","selectedLab","currentError","currentSelectedSlots","log","availableTimeSlots","label","available","prevSlots","filter","slot","find","ts","handleBookingSubmit","preventDefault","length","bookingData","response","bookings","handleDeleteBookedSlot","bookingId","window","confirm","handleSlotSelect","newSlots","s","handleBookingStatusChange","action","handleStatusFilter","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","placeholder","disabled","readOnly","min","onKeyDown","style","fontSize","color","marginTop","padding","backgroundColor","borderRadius","border","map","onClick","position","top","marginBottom","boxShadow","zIndex","whiteSpace","booking","formatted_date","time_slot","_c","$RefreshReg$"],"sources":["C:/Users/91989/Downloads/Slot-Booking/frontend-supabase/src/pages/SlotBooking.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { \r\n  fetchAvailableSeats, \r\n  bookSlot, \r\n  fetchBookedSlots, \r\n  deleteBookedSlot, \r\n  checkApiHealth,\r\n  fetchPendingBookings,\r\n  handleBookingAction,\r\n  fetchDayOrder\r\n} from '../services/api';\r\nimport './SlotBooking.css';\r\nimport { supabase } from '../supabaseClient';\r\nimport TimeSlots from '../components/TimeSlots';\r\n\r\nconst SlotBooking = () => {\r\n  // Form state\r\n  const [bookingForm, setBookingForm] = useState({\r\n    facultyId: '',\r\n    name: '',\r\n    email: '',\r\n    department: '',\r\n    date: '',\r\n    dayOrder: '',\r\n    lab: '',\r\n    timeSlots: [] // Changed from timeSlot to timeSlots array\r\n  });\r\n\r\n  // UI state\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [bookedSlots, setBookedSlots] = useState([]);\r\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [apiError, setApiError] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [selectedSlots, setSelectedSlots] = useState([]); // Changed from selectedSlot to selectedSlots array\r\n  const [message, setMessage] = useState('');\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [pendingBookings, setPendingBookings] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const [bookingCounts, setBookingCounts] = useState({ waiting: 0, confirmed: 0, rejected: 0 });\r\n\r\n  // Check API health and initialize user on component mount\r\n  useEffect(() => {\r\n    const checkServerHealth = async () => {\r\n      const isHealthy = await checkApiHealth();\r\n      setApiError(!isHealthy);\r\n    };\r\n    \r\n    const initializeUser = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (user) {\r\n          setUser(user);\r\n          const userIsAdmin = isAdminUser(user.email);\r\n          setIsAdmin(userIsAdmin);\r\n          \r\n          setBookingForm(prev => ({\r\n            ...prev,\r\n            email: user.email,\r\n            name: user.user_metadata?.full_name || user.email\r\n          }));\r\n\r\n          if (user.email) {\r\n            await fetchUserBookings(user.email);\r\n            if (userIsAdmin) {\r\n              await fetchPendingBookingsData();\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing user:', error);\r\n      }\r\n    };\r\n    \r\n    checkServerHealth();\r\n    initializeUser();\r\n    \r\n    // Set the minimum date to today\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const dateInput = document.getElementById(\"date\");\r\n    if (dateInput) {\r\n      dateInput.setAttribute(\"min\", today);\r\n    }\r\n  }, []);\r\n  \r\n  // Function to check if a user is admin\r\n  const isAdminUser = (email) => {\r\n    const adminEmails = ['km5260@srmist.edu.in'];\r\n    return adminEmails.includes(email);\r\n  };\r\n\r\n  // Utility function to check if a date is a weekend\r\n  const isWeekend = (date) => {\r\n    const day = new Date(date).getDay();\r\n    // 0 is Sunday, 6 is Saturday\r\n    return day === 0 || day === 6;\r\n  };\r\n  \r\n  // Function to provide a descriptive date string\r\n  const formatDateForDisplay = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date.getDay();\r\n    const isWeekendDay = day === 0 || day === 6;\r\n    const formattedDate = date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\r\n    \r\n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\r\n  };\r\n\r\n  // Function to check if a date should be disabled (weekends)\r\n  const isDateDisabled = (date) => {\r\n    const currentDate = new Date(date);\r\n    return currentDate.getDay() === 0 || currentDate.getDay() === 6; // 0 is Sunday, 6 is Saturday\r\n  };\r\n\r\n  // Function to get the next available date (skip weekends)\r\n  const getNextAvailableDate = (date) => {\r\n    const currentDate = new Date(date);\r\n    while (isDateDisabled(currentDate)) {\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return currentDate.toISOString().split('T')[0];\r\n  };\r\n\r\n  // Handle booking form input changes\r\n  const handleBookingChange = async (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    // Prevent only email from being changed\r\n    if (name === 'email') {\r\n      return;\r\n    }\r\n    \r\n    // Clear previous messages\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    // Handle date changes with weekend validation\r\n    if (name === 'date' && value) {\r\n      if (isDateDisabled(value)) {\r\n        const nextAvailableDate = getNextAvailableDate(value);\r\n        setError('Weekends are not available for booking. Next available date selected.');\r\n        \r\n        // Update the date input to the next available date\r\n        e.target.value = nextAvailableDate;\r\n        \r\n        setBookingForm(prev => ({\r\n          ...prev,\r\n          date: nextAvailableDate,\r\n          lab: '',\r\n          timeSlots: []\r\n        }));\r\n        setTimeSlots([]);\r\n        setSelectedSlots([]);\r\n        return;\r\n      }\r\n\r\n      setBookingForm(prev => ({\r\n        ...prev,\r\n        date: value,\r\n        lab: '',  // Reset lab selection when date changes\r\n        timeSlots: []  // Reset time slots when date changes\r\n      }));\r\n      setTimeSlots([]); // Clear time slots\r\n      setSelectedSlots([]); // Clear selected slots when date changes\r\n    } else {\r\n      // Update form state for other fields\r\n      setBookingForm(prev => {\r\n        const updatedForm = {\r\n          ...prev,\r\n          [name]: value\r\n        };\r\n\r\n        // If changing day order, reset lab and time slots\r\n        if (name === 'dayOrder') {\r\n          updatedForm.lab = '';\r\n          updatedForm.timeSlots = [];\r\n          setTimeSlots([]);\r\n          setSelectedSlots([]);\r\n        }\r\n\r\n        // Handle lab selection or day order changes\r\n        if ((name === 'lab' || name === 'dayOrder') && updatedForm.date) {\r\n          // Only fetch available seats if we have both lab and day order\r\n          if (updatedForm.lab && updatedForm.dayOrder) {\r\n            handleFetchAvailableSeats(updatedForm.date, updatedForm.lab);\r\n          }\r\n        }\r\n\r\n        return updatedForm;\r\n      });\r\n    }\r\n  };\r\n\r\n  // Retry server connection\r\n  const handleRetryConnection = async () => {\r\n    setLoading(true);\r\n    const isHealthy = await checkApiHealth();\r\n    setApiError(!isHealthy);\r\n    setLoading(false);\r\n    \r\n    if (isHealthy && bookingForm.date && bookingForm.lab && bookingForm.dayOrder) {\r\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\r\n    }\r\n  };\r\n\r\n  // Fetch available seats for selected date and lab\r\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\r\n    if (!selectedDate || !selectedLab || !bookingForm.dayOrder) {\r\n      setTimeSlots([]);\r\n      setSelectedSlots([]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    // Store current error message and selected slots\r\n    const currentError = error;\r\n    const currentSelectedSlots = selectedSlots;\r\n    setApiError(false);\r\n    \r\n    try {\r\n      const data = await fetchAvailableSeats(selectedDate, selectedLab, bookingForm.dayOrder);\r\n      console.log('Available slots response:', data);\r\n      \r\n      // Transform data for the time slot dropdown with boolean availability\r\n      const availableTimeSlots = [\r\n        { value: \"08:00-08:50\", label: \"8:00 AM - 8:50 AM\", available: data[\"08:00-08:50\"] === true },\r\n        { value: \"08:50-09:40\", label: \"8:50 AM - 9:40 AM\", available: data[\"08:50-09:40\"] === true },\r\n        { value: \"09:45-10:35\", label: \"9:45 AM - 10:35 AM\", available: data[\"09:45-10:35\"] === true },\r\n        { value: \"10:40-11:30\", label: \"10:40 AM - 11:30 AM\", available: data[\"10:40-11:30\"] === true },\r\n        { value: \"11:35-12:25\", label: \"11:35 AM - 12:25 PM\", available: data[\"11:35-12:25\"] === true },\r\n        { value: \"12:30-01:20\", label: \"12:30 PM - 1:20 PM\", available: data[\"12:30-01:20\"] === true },\r\n        { value: \"01:25-02:15\", label: \"1:25 PM - 2:15 PM\", available: data[\"01:25-02:15\"] === true },\r\n        { value: \"02:20-03:10\", label: \"2:20 PM - 3:10 PM\", available: data[\"02:20-03:10\"] === true },\r\n        { value: \"03:10-04:00\", label: \"3:10 PM - 4:00 PM\", available: data[\"03:10-04:00\"] === true },\r\n        { value: \"04:00-04:50\", label: \"4:00 PM - 4:50 PM\", available: data[\"04:00-04:50\"] === true }\r\n      ];\r\n      \r\n      // Update time slots\r\n      setTimeSlots(availableTimeSlots);\r\n      \r\n      // Remove any selected slots that are no longer available\r\n      setSelectedSlots(prevSlots => \r\n        prevSlots.filter(slot => \r\n          availableTimeSlots.find(ts => ts.value === slot && ts.available)\r\n        )\r\n      );\r\n\r\n      // Restore error message if it exists\r\n      if (currentError) {\r\n        setError(currentError);\r\n      }\r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle booking form submission\r\n  const handleBookingSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!bookingForm.date || !bookingForm.lab || !bookingForm.timeSlots || bookingForm.timeSlots.length === 0) {\r\n        setError('Please select a date, lab, and at least one time slot.');\r\n        return;\r\n      }\r\n\r\n      // Create booking data\r\n      const bookingData = {\r\n        ...bookingForm,\r\n        timeSlots: bookingForm.timeSlots // Ensure timeSlots is an array\r\n      };\r\n\r\n      // Make the booking request\r\n      const response = await bookSlot(bookingData);\r\n\r\n      if (response.success) {\r\n        setSuccess('Booking request submitted successfully!');\r\n        // Clear form\r\n        setBookingForm(prev => ({\r\n          ...prev,\r\n          date: '',\r\n          lab: '',\r\n          timeSlots: []\r\n        }));\r\n        setSelectedSlots([]);\r\n        setTimeSlots([]);\r\n        \r\n        // Refresh booked slots\r\n        if (user?.email) {\r\n          await fetchUserBookings(user.email);\r\n        }\r\n      } else {\r\n        setError(response.error || 'Failed to create booking. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Booking error:', error);\r\n      setError(error.message || 'Failed to create booking. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch booked slots for a user\r\n  const fetchUserBookings = async (email) => {\r\n    try {\r\n      const bookings = await fetchBookedSlots(email);\r\n      setBookedSlots(bookings);\r\n    } catch (error) {\r\n      console.error('Error fetching user bookings:', error);\r\n      setError('Failed to fetch your bookings. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Delete a booked slot\r\n  const handleDeleteBookedSlot = async (bookingId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    try {\r\n      const data = await deleteBookedSlot(bookingId);\r\n      setSuccess(data.message);\r\n      \r\n      // Refresh the booked slots using the email from the form\r\n      if (bookingForm.email) {\r\n        fetchUserBookings(bookingForm.email);\r\n      }\r\n      \r\n      // Fetch available seats again to update the slots\r\n      if (bookingForm.date && bookingForm.lab) {\r\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\r\n      }\r\n      \r\n    } catch (error) {\r\n      if (error.message.includes('Backend server is not running')) {\r\n        setApiError(true);\r\n      } else {\r\n        setError(error.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSlotSelect = (slot) => {\r\n    setSelectedSlots(prevSlots => {\r\n      const newSlots = prevSlots.includes(slot)\r\n        ? prevSlots.filter(s => s !== slot)  // Remove slot if already selected\r\n        : [...prevSlots, slot];              // Add slot if not selected\r\n      \r\n      // Update bookingForm.timeSlots as well\r\n      setBookingForm(prev => ({\r\n        ...prev,\r\n        timeSlots: newSlots\r\n      }));\r\n      \r\n      return newSlots;\r\n    });\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  // Function to fetch pending bookings (admin only)\r\n  const fetchPendingBookingsData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const pendingBookings = await fetchPendingBookings(user.email);\r\n      setPendingBookings(pendingBookings);\r\n    } catch (error) {\r\n      console.error('Error fetching pending bookings:', error);\r\n      setError('Failed to fetch pending bookings. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle booking status change (confirm/reject)\r\n  const handleBookingStatusChange = async (bookingId, action) => {\r\n    try {\r\n      setLoading(true);\r\n      await handleBookingAction(bookingId, action, user.email);\r\n      \r\n      // Refetch pending bookings to update the UI\r\n      await fetchPendingBookingsData();\r\n      setMessage(`Booking ${action === 'confirm' ? 'confirmed' : 'rejected'} successfully`);\r\n    } catch (error) {\r\n      console.error(`Error ${action}ing booking:`, error);\r\n      setError(`Failed to ${action} booking. Please try again later.`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleStatusFilter = (status) => {\r\n    setSelectedStatus(status);\r\n    if (user?.email) {\r\n      fetchUserBookings(user.email);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"slot-booking-container\">\r\n      <h2>Lab Slot Booking</h2>\r\n      \r\n      <form onSubmit={handleBookingSubmit} className=\"booking-form\">\r\n        <label htmlFor=\"facultyId\">Faculty ID:</label>\r\n        <input \r\n          type=\"text\" \r\n          id=\"facultyId\" \r\n          name=\"facultyId\" \r\n          value={bookingForm.facultyId}\r\n          onChange={handleBookingChange}\r\n          required \r\n          placeholder=\"Enter your faculty ID\"\r\n          disabled={loading || apiError}\r\n        />\r\n\r\n        <label htmlFor=\"name\">Full Name:</label>\r\n        <input \r\n          type=\"text\" \r\n          id=\"name\" \r\n          name=\"name\" \r\n          value={bookingForm.name}\r\n          onChange={handleBookingChange}\r\n          required\r\n          placeholder=\"Enter your full name\"\r\n        />\r\n\r\n        <label htmlFor=\"email\">Email (SRM):</label>\r\n        <input \r\n          type=\"email\" \r\n          id=\"email\" \r\n          name=\"email\" \r\n          value={bookingForm.email}\r\n          readOnly\r\n          disabled\r\n          className=\"readonly-input\"\r\n        />\r\n\r\n        <label htmlFor=\"department\">Department:</label>\r\n        <select \r\n          id=\"department\" \r\n          name=\"department\" \r\n          value={bookingForm.department}\r\n          onChange={handleBookingChange}\r\n          required\r\n          disabled={loading || apiError}\r\n        >\r\n          <option value=\"\">Select Department</option>\r\n          <option value=\"NETWORKING\">Networking</option>\r\n          <option value=\"CINTEL\">CINTEL</option>\r\n          <option value=\"DSBS\">DSBS</option>\r\n          <option value=\"CTECH\">CTECH</option>\r\n        </select>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"date\">Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            name=\"date\"\r\n            value={bookingForm.date}\r\n            onChange={handleBookingChange}\r\n            required\r\n            disabled={loading || apiError}\r\n            min={new Date().toISOString().split('T')[0]}\r\n            onKeyDown={(e) => e.preventDefault()} // Prevent manual input\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"dayOrder\">Day Order:</label>\r\n          <select\r\n            id=\"dayOrder\"\r\n            name=\"dayOrder\"\r\n            value={bookingForm.dayOrder || ''}\r\n            onChange={handleBookingChange}\r\n            required\r\n            className=\"day-order-select\"\r\n          >\r\n            <option value=\"\">Select Day Order</option>\r\n            <option value=\"1\">Day 1</option>\r\n            <option value=\"2\">Day 2</option>\r\n            <option value=\"3\">Day 3</option>\r\n            <option value=\"4\">Day 4</option>\r\n            <option value=\"5\">Day 5</option>\r\n          </select>\r\n          <div className=\"day-order-note\" style={{\r\n            fontSize: '0.85rem',\r\n            color: '#666',\r\n            marginTop: '5px',\r\n            padding: '8px',\r\n            backgroundColor: '#fff3e0',\r\n            borderRadius: '4px',\r\n            border: '1px solid #ffe0b2'\r\n          }}>\r\n            <strong>Important:</strong> Please select the correct day order for your chosen date. Available slots will change based on the day order schedule.\r\n          </div>\r\n        </div>\r\n\r\n        <label htmlFor=\"lab\">Select Lab:</label>\r\n        <select \r\n          id=\"lab\" \r\n          name=\"lab\" \r\n          value={bookingForm.lab}\r\n          onChange={handleBookingChange}\r\n          required\r\n          disabled={loading || apiError}\r\n          className=\"lab-select\"\r\n        >\r\n          <option value=\"\">Select a Lab</option>\r\n          <option value=\"LAB A\">LAB A</option>\r\n          <option value=\"LAB B\">LAB B</option>\r\n          <option value=\"LAB C\">LAB C</option>\r\n          <option value=\"LAB D\">LAB D</option>\r\n        </select>\r\n\r\n        <div className=\"time-slots-grid\">\r\n          {loading && timeSlots.length === 0 ? (\r\n            <div>Loading available slots...</div>\r\n          ) : timeSlots.length > 0 ? (\r\n            timeSlots.map(slot => (\r\n              <div\r\n                key={slot.value}\r\n                className={`time-slot-item ${!slot.available ? 'disabled' : ''} ${selectedSlots.includes(slot.value) ? 'selected' : ''}`}\r\n                onClick={() => slot.available && handleSlotSelect(slot.value)}\r\n              >\r\n                <div className=\"time-slot-time\">{slot.label}</div>\r\n                <div className=\"time-slot-status\">\r\n                  {slot.available ? 'Available' : 'Booked'}\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div>Select a date and lab first</div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"selected-slots\">\r\n          <h3>Selected Time Slots:</h3>\r\n          {selectedSlots.length > 0 ? (\r\n            <div className=\"selected-slots-list\">\r\n              {selectedSlots.map(slot => (\r\n                <div key={slot} className=\"selected-slot-item\">\r\n                  {slot}\r\n                  <button \r\n                    className=\"remove-slot\"\r\n                    onClick={() => handleSlotSelect(slot)}\r\n                  >\r\n                    ×\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <p>No slots selected</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"button-container\">\r\n          <button \r\n            type=\"submit\"\r\n            className=\"booking-button\"\r\n            disabled={loading || apiError || selectedSlots.length === 0}\r\n          >\r\n            {loading ? 'Booking...' : `Book ${selectedSlots.length} Slot${selectedSlots.length !== 1 ? 's' : ''}`}\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      {apiError && (\r\n        <div className=\"api-error\">\r\n          <h3>Connection Error</h3>\r\n          <p>Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.</p>\r\n          <button \r\n            onClick={handleRetryConnection} \r\n            disabled={loading}\r\n            className=\"action-button\"\r\n          >\r\n            {loading ? 'Trying to connect...' : 'Retry Connection'}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {error && (\r\n        <div className=\"error-message\" style={{\r\n          position: 'sticky',\r\n          top: '20px',\r\n          backgroundColor: '#ffebee',\r\n          color: '#c62828',\r\n          padding: '15px',\r\n          borderRadius: '5px',\r\n          marginBottom: '20px',\r\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n          zIndex: 1000,\r\n          whiteSpace: 'pre-line'  // This will preserve line breaks in the error message\r\n        }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      {success && (\r\n        <div className=\"success-message\">\r\n          {success}\r\n        </div>\r\n      )}\r\n      \r\n      {message && (\r\n        <div className={`message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`}>\r\n          {message}\r\n        </div>\r\n      )}\r\n\r\n      {showBookedSlots && (\r\n        <div className=\"booked-slots-section\">\r\n          <h2>Your Bookings</h2>\r\n          \r\n          <div className=\"status-filter-buttons\">\r\n            <button\r\n              className={`status-button ${selectedStatus === 'all' ? 'active' : ''}`}\r\n              onClick={() => handleStatusFilter('all')}\r\n            >\r\n              All Bookings ({bookingCounts.waiting + bookingCounts.confirmed + bookingCounts.rejected})\r\n            </button>\r\n            <button\r\n              className={`status-button ${selectedStatus === 'waiting' ? 'active' : ''}`}\r\n              onClick={() => handleStatusFilter('waiting')}\r\n            >\r\n              Waiting ({bookingCounts.waiting})\r\n            </button>\r\n            <button\r\n              className={`status-button ${selectedStatus === 'confirmed' ? 'active' : ''}`}\r\n              onClick={() => handleStatusFilter('confirmed')}\r\n            >\r\n              Confirmed ({bookingCounts.confirmed})\r\n            </button>\r\n            <button\r\n              className={`status-button ${selectedStatus === 'rejected' ? 'active' : ''}`}\r\n              onClick={() => handleStatusFilter('rejected')}\r\n            >\r\n              Rejected ({bookingCounts.rejected})\r\n            </button>\r\n          </div>\r\n\r\n          {bookedSlots.length > 0 ? (\r\n            <div className=\"booked-slots-list\">\r\n              {bookedSlots.map((booking) => (\r\n                <div key={booking.id} className={`booking-card ${booking.status}`}>\r\n                  <div className=\"booking-status-badge\">{booking.status}</div>\r\n                  <div className=\"booking-info\">\r\n                    <h3>Booking Details</h3>\r\n                    <p><strong>Date:</strong> {booking.formatted_date || booking.date}</p>\r\n                    <p><strong>Lab:</strong> {booking.lab}</p>\r\n                    <p><strong>Time Slot:</strong> {booking.time_slot}</p>\r\n                    <p><strong>Status:</strong> {booking.status}</p>\r\n                  </div>\r\n                  {booking.status === 'waiting' && (\r\n                    <button\r\n                      className=\"cancel-button\"\r\n                      onClick={() => handleDeleteBookedSlot(booking.id)}\r\n                      disabled={loading}\r\n                    >\r\n                      Cancel Booking\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-bookings\">\r\n              {selectedStatus === 'all' \r\n                ? 'You have no bookings yet'\r\n                : `You have no ${selectedStatus} bookings`}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SlotBooking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}