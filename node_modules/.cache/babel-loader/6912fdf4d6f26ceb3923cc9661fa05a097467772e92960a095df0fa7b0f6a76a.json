{"ast":null,"code":"// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport async function checkApiHealth() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n\n    // Check if response is JSON\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      console.error('Health check returned non-JSON response');\n      return false;\n    }\n    const data = await response.json();\n    return response.ok && data.status === 'ok';\n  } catch (error) {\n    console.error('Health check failed:', error);\n    return false;\n  }\n}\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport async function fetchAvailableSeats(date, lab) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${encodeURIComponent(lab)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n}\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport async function bookSlot(bookingData) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookingData)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport async function fetchBookedSlots(email) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n}\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport async function deleteBookedSlot(slotId) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error deleting booked slot:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","checkApiHealth","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","contentType","headers","get","includes","console","error","data","json","ok","status","handleResponse","text","Error","message","fetchAvailableSeats","date","lab","isHealthy","encodeURIComponent","bookSlot","bookingData","method","body","JSON","stringify","fetchBookedSlots","email","deleteBookedSlot","slotId"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/services/api.js"],"sourcesContent":["// Export API_BASE_URL for use in other files\nexport const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\n * Check if the API server is running\n * @returns {Promise<boolean>} True if the API is healthy, false otherwise\n */\nexport async function checkApiHealth() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    \n    const response = await fetch(`${API_BASE_URL}/health`, {\n      signal: controller.signal\n    });\n    \n    clearTimeout(timeoutId);\n    \n    // Check if response is JSON\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      console.error('Health check returned non-JSON response');\n      return false;\n    }\n    \n    const data = await response.json();\n    return response.ok && data.status === 'ok';\n  } catch (error) {\n    console.error('Health check failed:', error);\n    return false;\n  }\n}\n\n/**\n * Helper function to handle API responses\n * @param {Response} response - The fetch response object\n * @returns {Promise<any>} - Parsed JSON response\n */\nasync function handleResponse(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (!contentType || !contentType.includes(\"application/json\")) {\n    const text = await response.text();\n    console.error('Non-JSON response:', text);\n    throw new Error('Backend server error. Please make sure the server is running.');\n  }\n  \n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || data.message || 'API request failed');\n  }\n  return data;\n}\n\n/**\n * Fetch available seats for a given date and lab\n * @param {string} date - The date to fetch available seats for\n * @param {string} lab - The lab to fetch available seats for\n * @returns {Promise<Object>} - Available seats data\n */\nexport async function fetchAvailableSeats(date, lab) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}&lab=${encodeURIComponent(lab)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n}\n\n/**\n * Book a lab slot\n * @param {Object} bookingData - The booking data\n * @returns {Promise<Object>} - Booking confirmation\n */\nexport async function bookSlot(bookingData) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(bookingData),\n    });\n\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetch booked slots for a user\n * @param {string} email - The user's email\n * @returns {Promise<Array>} - Array of booked slots\n */\nexport async function fetchBookedSlots(email) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n}\n\n/**\n * Delete a booked slot\n * @param {number} slotId - The slot ID to delete\n * @returns {Promise<Object>} - Deletion confirmation\n */\nexport async function deleteBookedSlot(slotId) {\n  try {\n    // Check API health first\n    const isHealthy = await checkApiHealth();\n    if (!isHealthy) {\n      throw new Error('Backend server is not running. Please start the Flask server.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${slotId}`, {\n      method: 'DELETE',\n    });\n\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error deleting booked slot:', error);\n    throw error;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}