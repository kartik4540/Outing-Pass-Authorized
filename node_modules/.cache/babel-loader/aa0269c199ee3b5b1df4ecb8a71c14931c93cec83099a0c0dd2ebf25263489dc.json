{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Desktop\\\\SRMLAB - Copy\\\\react-version\\\\src\\\\pages\\\\SlotBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, API_BASE_URL, fetchPendingBookings, handleBookingAction, fetchDayOrder } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotBooking = () => {\n  _s();\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    dayOrder: '',\n    lab: '',\n    timeSlots: [] // Changed from timeSlot to timeSlots array\n  });\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]); // Changed from selectedSlot to selectedSlots array\n  const [message, setMessage] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [pendingBookings, setPendingBookings] = useState([]);\n  const [user, setUser] = useState(null);\n\n  // Check API health and initialize user on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    const initializeUser = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          setUser(user);\n          const userIsAdmin = isAdminUser(user.email);\n          setIsAdmin(userIsAdmin);\n          setBookingForm(prev => {\n            var _user$user_metadata;\n            return {\n              ...prev,\n              email: user.email,\n              name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email\n            };\n          });\n          if (user.email) {\n            await fetchUserBookings(user.email);\n            if (userIsAdmin) {\n              await fetchPendingBookingsData();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing user:', error);\n      }\n    };\n    checkServerHealth();\n    initializeUser();\n\n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    const dateInput = document.getElementById(\"date\");\n    if (dateInput) {\n      dateInput.setAttribute(\"min\", today);\n    }\n  }, []);\n\n  // Function to check if a user is admin\n  const isAdminUser = email => {\n    const adminEmails = ['km5260@srmist.edu.in'];\n    return adminEmails.includes(email);\n  };\n\n  // Utility function to check if a date is a weekend\n  const isWeekend = date => {\n    const day = new Date(date).getDay();\n    // 0 is Sunday, 6 is Saturday\n    return day === 0 || day === 6;\n  };\n\n  // Function to provide a descriptive date string\n  const formatDateForDisplay = dateString => {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    const isWeekendDay = day === 0 || day === 6;\n    const formattedDate = date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\n  };\n\n  // Handle booking form input changes\n  const handleBookingChange = async e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Update form state immediately for all fields\n    setBookingForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Handle date changes\n    if (name === 'date' && value) {\n      try {\n        setLoading(true);\n        // Get day order for selected date\n        const response = await fetch(`${API_BASE_URL}/day-order?date=${encodeURIComponent(value)}`);\n        const data = await response.json();\n        if (response.ok && data.day_order) {\n          setBookingForm(prev => ({\n            ...prev,\n            date: value,\n            dayOrder: data.day_order.toString(),\n            lab: '',\n            // Reset lab selection when date changes\n            timeSlots: [] // Reset time slots when date changes\n          }));\n          setTimeSlots([]); // Clear time slots\n        } else {\n          setError('Selected date is a weekend. Please choose a weekday.');\n          setBookingForm(prev => ({\n            ...prev,\n            dayOrder: '',\n            lab: '',\n            // Reset lab selection on error\n            timeSlots: [] // Reset time slots on error\n          }));\n        }\n      } catch (error) {\n        console.error('Error fetching day order:', error);\n        setError('Error fetching day order. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    // Handle lab selection\n    if (name === 'lab' && value && bookingForm.date) {\n      handleFetchAvailableSeats(bookingForm.date, value);\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    if (isHealthy && bookingForm.date && bookingForm.lab) {\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n    }\n  };\n\n  // Fetch available seats for selected date and lab\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\n    if (!selectedDate || !selectedLab) {\n      setTimeSlots([]);\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    try {\n      const data = await fetchAvailableSeats(selectedDate, selectedLab);\n      console.log('Available slots response:', data);\n\n      // Check if the slot should be blocked based on Lab D regular classes schedule\n      const isSlotBlockedForLabD = (timeSlot, dayOrder) => {\n        var _blockedSlots$dayOrde;\n        if (selectedLab !== 'LAB D' && selectedLab !== 'LAB-D') return false;\n\n        // Time slots to block for Lab D by day order\n        const blockedSlots = {\n          '1': ['02:20-03:10', '03:10-04:00'],\n          // Day 1: 2:10 PM to 4:00 PM\n          '2': ['01:25-02:15', '02:20-03:10', '03:10-04:00', '04:00-04:50'],\n          // Day 2: 1:25 PM to 4:55 PM\n          '3': ['09:45-10:35', '10:40-11:30'],\n          // Day 3: 9:45 AM to 11:30 AM\n          '4': [],\n          // Day 4: NIL (no class)\n          '5': ['08:00-08:50', '08:50-09:40', '09:45-10:35', '10:40-11:30'] // Day 5: 8:00 AM to 11:30 AM\n        };\n        return ((_blockedSlots$dayOrde = blockedSlots[dayOrder]) === null || _blockedSlots$dayOrde === void 0 ? void 0 : _blockedSlots$dayOrde.includes(timeSlot)) || false;\n      };\n\n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [{\n        value: \"08:00-08:50\",\n        label: \"8:00 AM - 8:50 AM\",\n        available: data[\"08:00-08:50\"] === true && !isSlotBlockedForLabD(\"08:00-08:50\", bookingForm.dayOrder)\n      }, {\n        value: \"08:50-09:40\",\n        label: \"8:50 AM - 9:40 AM\",\n        available: data[\"08:50-09:40\"] === true && !isSlotBlockedForLabD(\"08:50-09:40\", bookingForm.dayOrder)\n      }, {\n        value: \"09:45-10:35\",\n        label: \"9:45 AM - 10:35 AM\",\n        available: data[\"09:45-10:35\"] === true && !isSlotBlockedForLabD(\"09:45-10:35\", bookingForm.dayOrder)\n      }, {\n        value: \"10:40-11:30\",\n        label: \"10:40 AM - 11:30 AM\",\n        available: data[\"10:40-11:30\"] === true && !isSlotBlockedForLabD(\"10:40-11:30\", bookingForm.dayOrder)\n      }, {\n        value: \"11:35-12:25\",\n        label: \"11:35 AM - 12:25 PM\",\n        available: data[\"11:35-12:25\"] === true && !isSlotBlockedForLabD(\"11:35-12:25\", bookingForm.dayOrder)\n      }, {\n        value: \"12:30-01:20\",\n        label: \"12:30 PM - 1:20 PM\",\n        available: data[\"12:30-01:20\"] === true && !isSlotBlockedForLabD(\"12:30-01:20\", bookingForm.dayOrder)\n      }, {\n        value: \"01:25-02:15\",\n        label: \"1:25 PM - 2:15 PM\",\n        available: data[\"01:25-02:15\"] === true && !isSlotBlockedForLabD(\"01:25-02:15\", bookingForm.dayOrder)\n      }, {\n        value: \"02:20-03:10\",\n        label: \"2:20 PM - 3:10 PM\",\n        available: data[\"02:20-03:10\"] === true && !isSlotBlockedForLabD(\"02:20-03:10\", bookingForm.dayOrder)\n      }, {\n        value: \"03:10-04:00\",\n        label: \"3:10 PM - 4:00 PM\",\n        available: data[\"03:10-04:00\"] === true && !isSlotBlockedForLabD(\"03:10-04:00\", bookingForm.dayOrder)\n      }, {\n        value: \"04:00-04:50\",\n        label: \"4:00 PM - 4:50 PM\",\n        available: data[\"04:00-04:50\"] === true && !isSlotBlockedForLabD(\"04:00-04:50\", bookingForm.dayOrder)\n      }];\n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async e => {\n    e.preventDefault();\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlots.length) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n\n      // Refresh the bookings after successful booking\n      fetchUserBookings(bookingForm.email);\n\n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: bookingForm.email,\n        // Keep the email\n        department: '',\n        date: '',\n        dayOrder: '',\n        lab: '',\n        timeSlots: []\n      });\n\n      // Clear time slots\n      setTimeSlots([]);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked slots for a user\n  const fetchUserBookings = async email => {\n    if (!email || !email.toLowerCase().endsWith('@srmist.edu.in')) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await fetchBookedSlots(email);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for your email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        console.error('Error fetching bookings:', error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async bookingId => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n\n      // Refresh the booked slots using the email from the form\n      if (bookingForm.email) {\n        fetchUserBookings(bookingForm.email);\n      }\n\n      // Fetch available seats again to update the slots\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlots(prevSlots => {\n      if (prevSlots.includes(slot)) {\n        // If slot is already selected, remove it\n        return prevSlots.filter(s => s !== slot);\n      } else {\n        // If slot is not selected, add it\n        return [...prevSlots, slot];\n      }\n    });\n    setError('');\n    setSuccess('');\n  };\n  const handleBooking = async () => {\n    if (!selectedDate || selectedSlots.length === 0) {\n      setError('Please select date and at least one time slot.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        setError('Please sign in to book slots.');\n        return;\n      }\n\n      // Book each selected slot\n      const bookingPromises = selectedSlots.map(slot => {\n        var _user$user_metadata2, _user$user_metadata3, _user$user_metadata4;\n        return fetch(`${API_BASE_URL}/book-slot`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            date: selectedDate,\n            timeSlot: slot,\n            email: user.email,\n            facultyId: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.registration_number) || user.email,\n            name: ((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.full_name) || user.email,\n            department: ((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.department) || 'Not specified',\n            lab: bookingForm.lab\n          })\n        });\n      });\n      const responses = await Promise.all(bookingPromises);\n      const results = await Promise.all(responses.map(async response => {\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          console.error('Non-JSON response:', await response.text());\n          throw new Error('Backend server error. Please make sure the server is running.');\n        }\n        return response.json();\n      }));\n\n      // Check if any booking failed\n      const failedBookings = results.filter(result => !result.success);\n      if (failedBookings.length > 0) {\n        setError(`Failed to book ${failedBookings.length} slot(s). Please try again.`);\n      } else {\n        setSuccess(`Successfully booked ${selectedSlots.length} slot(s)`);\n      }\n\n      // Reset selections after successful booking\n      setSelectedSlots([]);\n      // Refresh the bookings list\n      fetchUserBookings(user.email);\n    } catch (error) {\n      setError('Error booking slots. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch pending bookings (admin only)\n  const fetchPendingBookingsData = async () => {\n    try {\n      if (!(user !== null && user !== void 0 && user.email)) return;\n      const response = await fetch(`${API_BASE_URL}/admin/pending-bookings?admin_email=${encodeURIComponent(user.email)}`);\n      if (!response.ok) throw new Error('Failed to fetch pending bookings');\n      const data = await response.json();\n      setPendingBookings(data);\n    } catch (error) {\n      console.error('Error fetching pending bookings:', error);\n      setError('Failed to fetch pending bookings');\n    }\n  };\n\n  // Function to handle booking status change (confirm/reject)\n  const handleBookingStatusChange = async (bookingId, action) => {\n    try {\n      if (!(user !== null && user !== void 0 && user.email)) return;\n      const response = await fetch(`${API_BASE_URL}/admin/booking/${bookingId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          admin_email: user.email,\n          action: action\n        })\n      });\n      if (!response.ok) throw new Error(`Failed to ${action} booking`);\n\n      // Refresh pending bookings list\n      await fetchPendingBookingsData();\n      setSuccess(`Booking ${action}ed successfully`);\n    } catch (error) {\n      console.error(`Error ${action}ing booking:`, error);\n      setError(`Failed to ${action} booking`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-booking-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lab Slot Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleBookingSubmit,\n      className: \"booking-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"facultyId\",\n        children: \"Faculty ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"facultyId\",\n        name: \"facultyId\",\n        value: bookingForm.facultyId,\n        onChange: handleBookingChange,\n        required: true,\n        placeholder: \"Enter your faculty ID\",\n        disabled: loading || apiError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Full Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: bookingForm.name,\n        onChange: handleBookingChange,\n        required: true,\n        placeholder: \"Enter your full name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email (SRM):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        value: bookingForm.email,\n        readOnly: true,\n        disabled: true,\n        className: \"readonly-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"department\",\n        children: \"Department:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"department\",\n        name: \"department\",\n        value: bookingForm.department,\n        onChange: handleBookingChange,\n        required: true,\n        disabled: loading || apiError,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"NETWORKING\",\n          children: \"Networking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"CINTEL\",\n          children: \"CINTEL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DSBS\",\n          children: \"DSBS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"CTECH\",\n          children: \"CTECH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: bookingForm.date,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dayOrder\",\n          children: \"Day Order:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"dayOrder\",\n          name: \"dayOrder\",\n          value: bookingForm.dayOrder ? `Day ${bookingForm.dayOrder}` : '',\n          readOnly: true,\n          className: \"readonly-input\",\n          style: {\n            backgroundColor: '#f5f5f5',\n            padding: '8px',\n            border: '1px solid #ddd'\n          },\n          placeholder: \"Select a date to see day order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lab\",\n        children: \"Select Lab:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"lab\",\n        name: \"lab\",\n        value: bookingForm.lab,\n        onChange: handleBookingChange,\n        required: true,\n        disabled: loading || apiError,\n        className: \"lab-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Lab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB A\",\n          children: \"LAB A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB B\",\n          children: \"LAB B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB C\",\n          children: \"LAB C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LAB D\",\n          children: \"LAB D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-slots-grid\",\n        children: loading && timeSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading available slots...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this) : timeSlots.length > 0 ? timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `time-slot-item ${!slot.available ? 'disabled' : ''} ${selectedSlots.includes(slot.value) ? 'selected' : ''}`,\n          onClick: () => slot.available && handleSlotSelect(slot.value),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot-time\",\n            children: slot.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot-status\",\n            children: slot.available ? 'Available' : 'Booked'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 17\n          }, this)]\n        }, slot.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Select a date and lab first\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-slots\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Selected Time Slots:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 11\n        }, this), selectedSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-slots-list\",\n          children: selectedSlots.map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-slot-item\",\n            children: [slot, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-slot\",\n              onClick: () => handleSlotSelect(slot),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 19\n            }, this)]\n          }, slot, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No slots selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBooking,\n          className: \"booking-button\",\n          disabled: loading || apiError || selectedSlots.length === 0,\n          children: loading ? 'Booking...' : `Book ${selectedSlots.length} Slot${selectedSlots.length !== 1 ? 's' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this), apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryConnection,\n        disabled: loading,\n        className: \"action-button\",\n        children: loading ? 'Trying to connect...' : 'Retry Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 9\n    }, this), showBookedSlots && bookedSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booked-slots-list\",\n      children: bookedSlots.map(booking => {\n        var _booking$status, _booking$status2, _booking$status3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"booked-slot-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booked-slot-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 20\n              }, this), \" \", booking.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Time Slot:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 20\n              }, this), \" \", booking.time_slot]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Day Order:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 669,\n                columnNumber: 20\n              }, this), \" \", booking.day_order]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Lab:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 20\n              }, this), \" \", booking.lab]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 20\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `status-${((_booking$status = booking.status) === null || _booking$status === void 0 ? void 0 : _booking$status.toLowerCase()) || 'waiting'}`,\n                children: ((_booking$status2 = booking.status) === null || _booking$status2 === void 0 ? void 0 : _booking$status2.charAt(0).toUpperCase()) + ((_booking$status3 = booking.status) === null || _booking$status3 === void 0 ? void 0 : _booking$status3.slice(1)) || 'Waiting'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this), (booking.status === 'waiting' || booking.status === 'confirmed') && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteBookedSlot(booking.id),\n            className: \"delete-button\",\n            disabled: loading,\n            children: \"Cancel Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 17\n          }, this)]\n        }, booking.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 5\n  }, this);\n};\n_s(SlotBooking, \"vczXxwiwFaLeANC1HtpWpfS8Ar4=\");\n_c = SlotBooking;\nexport default SlotBooking;\nvar _c;\n$RefreshReg$(_c, \"SlotBooking\");","map":{"version":3,"names":["React","useState","useEffect","fetchAvailableSeats","bookSlot","fetchBookedSlots","deleteBookedSlot","checkApiHealth","API_BASE_URL","fetchPendingBookings","handleBookingAction","fetchDayOrder","supabase","TimeSlots","jsxDEV","_jsxDEV","SlotBooking","_s","bookingForm","setBookingForm","facultyId","name","email","department","date","dayOrder","lab","timeSlots","setTimeSlots","loading","setLoading","bookedSlots","setBookedSlots","showBookedSlots","setShowBookedSlots","error","setError","success","setSuccess","apiError","setApiError","selectedDate","setSelectedDate","selectedSlots","setSelectedSlots","message","setMessage","isAdmin","setIsAdmin","pendingBookings","setPendingBookings","user","setUser","checkServerHealth","isHealthy","initializeUser","data","auth","getUser","userIsAdmin","isAdminUser","prev","_user$user_metadata","user_metadata","full_name","fetchUserBookings","fetchPendingBookingsData","console","today","Date","toISOString","split","dateInput","document","getElementById","setAttribute","adminEmails","includes","isWeekend","day","getDay","formatDateForDisplay","dateString","isWeekendDay","formattedDate","toLocaleDateString","weekday","year","month","handleBookingChange","e","value","target","response","fetch","encodeURIComponent","json","ok","day_order","toString","handleFetchAvailableSeats","handleRetryConnection","selectedLab","log","isSlotBlockedForLabD","timeSlot","_blockedSlots$dayOrde","blockedSlots","availableTimeSlots","label","available","handleBookingSubmit","preventDefault","length","toLowerCase","endsWith","handleDeleteBookedSlot","bookingId","window","confirm","handleSlotSelect","slot","prevSlots","filter","s","handleBooking","bookingPromises","map","_user$user_metadata2","_user$user_metadata3","_user$user_metadata4","method","headers","body","JSON","stringify","registration_number","responses","Promise","all","results","contentType","get","text","Error","failedBookings","result","handleBookingStatusChange","action","admin_email","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","placeholder","disabled","readOnly","style","backgroundColor","padding","border","onClick","booking","_booking$status","_booking$status2","_booking$status3","time_slot","status","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/pages/SlotBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  fetchAvailableSeats, \n  bookSlot, \n  fetchBookedSlots, \n  deleteBookedSlot, \n  checkApiHealth, \n  API_BASE_URL,\n  fetchPendingBookings,\n  handleBookingAction,\n  fetchDayOrder\n} from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\n\nconst SlotBooking = () => {\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    dayOrder: '',\n    lab: '',\n    timeSlots: [] // Changed from timeSlot to timeSlots array\n  });\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]); // Changed from selectedSlot to selectedSlots array\n  const [message, setMessage] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [pendingBookings, setPendingBookings] = useState([]);\n  const [user, setUser] = useState(null);\n\n  // Check API health and initialize user on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    \n    const initializeUser = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          setUser(user);\n          const userIsAdmin = isAdminUser(user.email);\n          setIsAdmin(userIsAdmin);\n          \n          setBookingForm(prev => ({\n            ...prev,\n            email: user.email,\n            name: user.user_metadata?.full_name || user.email\n          }));\n\n          if (user.email) {\n            await fetchUserBookings(user.email);\n            if (userIsAdmin) {\n              await fetchPendingBookingsData();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing user:', error);\n      }\n    };\n    \n    checkServerHealth();\n    initializeUser();\n    \n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    const dateInput = document.getElementById(\"date\");\n    if (dateInput) {\n      dateInput.setAttribute(\"min\", today);\n    }\n  }, []);\n  \n  // Function to check if a user is admin\n  const isAdminUser = (email) => {\n    const adminEmails = ['km5260@srmist.edu.in'];\n    return adminEmails.includes(email);\n  };\n\n  // Utility function to check if a date is a weekend\n  const isWeekend = (date) => {\n    const day = new Date(date).getDay();\n    // 0 is Sunday, 6 is Saturday\n    return day === 0 || day === 6;\n  };\n  \n  // Function to provide a descriptive date string\n  const formatDateForDisplay = (dateString) => {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    const isWeekendDay = day === 0 || day === 6;\n    const formattedDate = date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    \n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\n  };\n\n  // Handle booking form input changes\n  const handleBookingChange = async (e) => {\n    const { name, value } = e.target;\n    \n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n    \n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Update form state immediately for all fields\n    setBookingForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Handle date changes\n    if (name === 'date' && value) {\n      try {\n        setLoading(true);\n        // Get day order for selected date\n        const response = await fetch(`${API_BASE_URL}/day-order?date=${encodeURIComponent(value)}`);\n        const data = await response.json();\n        \n        if (response.ok && data.day_order) {\n          setBookingForm(prev => ({\n            ...prev,\n            date: value,\n            dayOrder: data.day_order.toString(),\n            lab: '',  // Reset lab selection when date changes\n            timeSlots: []  // Reset time slots when date changes\n          }));\n          setTimeSlots([]); // Clear time slots\n        } else {\n          setError('Selected date is a weekend. Please choose a weekday.');\n          setBookingForm(prev => ({\n            ...prev,\n            dayOrder: '',\n            lab: '',  // Reset lab selection on error\n            timeSlots: []  // Reset time slots on error\n          }));\n        }\n      } catch (error) {\n        console.error('Error fetching day order:', error);\n        setError('Error fetching day order. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    // Handle lab selection\n    if (name === 'lab' && value && bookingForm.date) {\n      handleFetchAvailableSeats(bookingForm.date, value);\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    \n    if (isHealthy && bookingForm.date && bookingForm.lab) {\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n    }\n  };\n\n  // Fetch available seats for selected date and lab\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\n    if (!selectedDate || !selectedLab) {\n      setTimeSlots([]);\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    \n    try {\n      const data = await fetchAvailableSeats(selectedDate, selectedLab);\n      console.log('Available slots response:', data);\n      \n      // Check if the slot should be blocked based on Lab D regular classes schedule\n      const isSlotBlockedForLabD = (timeSlot, dayOrder) => {\n        if (selectedLab !== 'LAB D' && selectedLab !== 'LAB-D') return false;\n        \n        // Time slots to block for Lab D by day order\n        const blockedSlots = {\n          '1': ['02:20-03:10', '03:10-04:00'],                     // Day 1: 2:10 PM to 4:00 PM\n          '2': ['01:25-02:15', '02:20-03:10', '03:10-04:00', '04:00-04:50'],  // Day 2: 1:25 PM to 4:55 PM\n          '3': ['09:45-10:35', '10:40-11:30'],                     // Day 3: 9:45 AM to 11:30 AM\n          '4': [],                                                 // Day 4: NIL (no class)\n          '5': ['08:00-08:50', '08:50-09:40', '09:45-10:35', '10:40-11:30']   // Day 5: 8:00 AM to 11:30 AM\n        };\n        \n        return blockedSlots[dayOrder]?.includes(timeSlot) || false;\n      };\n      \n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [\n        { value: \"08:00-08:50\", label: \"8:00 AM - 8:50 AM\", available: data[\"08:00-08:50\"] === true && !isSlotBlockedForLabD(\"08:00-08:50\", bookingForm.dayOrder) },\n        { value: \"08:50-09:40\", label: \"8:50 AM - 9:40 AM\", available: data[\"08:50-09:40\"] === true && !isSlotBlockedForLabD(\"08:50-09:40\", bookingForm.dayOrder) },\n        { value: \"09:45-10:35\", label: \"9:45 AM - 10:35 AM\", available: data[\"09:45-10:35\"] === true && !isSlotBlockedForLabD(\"09:45-10:35\", bookingForm.dayOrder) },\n        { value: \"10:40-11:30\", label: \"10:40 AM - 11:30 AM\", available: data[\"10:40-11:30\"] === true && !isSlotBlockedForLabD(\"10:40-11:30\", bookingForm.dayOrder) },\n        { value: \"11:35-12:25\", label: \"11:35 AM - 12:25 PM\", available: data[\"11:35-12:25\"] === true && !isSlotBlockedForLabD(\"11:35-12:25\", bookingForm.dayOrder) },\n        { value: \"12:30-01:20\", label: \"12:30 PM - 1:20 PM\", available: data[\"12:30-01:20\"] === true && !isSlotBlockedForLabD(\"12:30-01:20\", bookingForm.dayOrder) },\n        { value: \"01:25-02:15\", label: \"1:25 PM - 2:15 PM\", available: data[\"01:25-02:15\"] === true && !isSlotBlockedForLabD(\"01:25-02:15\", bookingForm.dayOrder) },\n        { value: \"02:20-03:10\", label: \"2:20 PM - 3:10 PM\", available: data[\"02:20-03:10\"] === true && !isSlotBlockedForLabD(\"02:20-03:10\", bookingForm.dayOrder) },\n        { value: \"03:10-04:00\", label: \"3:10 PM - 4:00 PM\", available: data[\"03:10-04:00\"] === true && !isSlotBlockedForLabD(\"03:10-04:00\", bookingForm.dayOrder) },\n        { value: \"04:00-04:50\", label: \"4:00 PM - 4:50 PM\", available: data[\"04:00-04:50\"] === true && !isSlotBlockedForLabD(\"04:00-04:50\", bookingForm.dayOrder) }\n      ];\n      \n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    \n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlots.length) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n      \n      // Refresh the bookings after successful booking\n      fetchUserBookings(bookingForm.email);\n      \n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: bookingForm.email, // Keep the email\n        department: '',\n        date: '',\n        dayOrder: '',\n        lab: '',\n        timeSlots: []\n      });\n      \n      // Clear time slots\n      setTimeSlots([]);\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked slots for a user\n  const fetchUserBookings = async (email) => {\n    if (!email || !email.toLowerCase().endsWith('@srmist.edu.in')) {\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await fetchBookedSlots(email);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      \n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for your email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        console.error('Error fetching bookings:', error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async (bookingId) => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n      \n      // Refresh the booked slots using the email from the form\n      if (bookingForm.email) {\n        fetchUserBookings(bookingForm.email);\n      }\n      \n      // Fetch available seats again to update the slots\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSlotSelect = (slot) => {\n    setSelectedSlots(prevSlots => {\n      if (prevSlots.includes(slot)) {\n        // If slot is already selected, remove it\n        return prevSlots.filter(s => s !== slot);\n      } else {\n        // If slot is not selected, add it\n        return [...prevSlots, slot];\n      }\n    });\n    setError('');\n    setSuccess('');\n  };\n\n  const handleBooking = async () => {\n    if (!selectedDate || selectedSlots.length === 0) {\n      setError('Please select date and at least one time slot.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n\n      if (!user) {\n        setError('Please sign in to book slots.');\n        return;\n      }\n\n      // Book each selected slot\n      const bookingPromises = selectedSlots.map(slot => \n        fetch(`${API_BASE_URL}/book-slot`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            date: selectedDate,\n            timeSlot: slot,\n            email: user.email,\n            facultyId: user.user_metadata?.registration_number || user.email,\n            name: user.user_metadata?.full_name || user.email,\n            department: user.user_metadata?.department || 'Not specified',\n            lab: bookingForm.lab\n          }),\n        })\n      );\n\n      const responses = await Promise.all(bookingPromises);\n      const results = await Promise.all(responses.map(async response => {\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          console.error('Non-JSON response:', await response.text());\n          throw new Error('Backend server error. Please make sure the server is running.');\n        }\n        return response.json();\n      }));\n\n      // Check if any booking failed\n      const failedBookings = results.filter(result => !result.success);\n      if (failedBookings.length > 0) {\n        setError(`Failed to book ${failedBookings.length} slot(s). Please try again.`);\n      } else {\n        setSuccess(`Successfully booked ${selectedSlots.length} slot(s)`);\n      }\n\n      // Reset selections after successful booking\n      setSelectedSlots([]);\n      // Refresh the bookings list\n      fetchUserBookings(user.email);\n    } catch (error) {\n      setError('Error booking slots. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch pending bookings (admin only)\n  const fetchPendingBookingsData = async () => {\n    try {\n      if (!user?.email) return;\n      \n      const response = await fetch(`${API_BASE_URL}/admin/pending-bookings?admin_email=${encodeURIComponent(user.email)}`);\n      if (!response.ok) throw new Error('Failed to fetch pending bookings');\n      \n      const data = await response.json();\n      setPendingBookings(data);\n    } catch (error) {\n      console.error('Error fetching pending bookings:', error);\n      setError('Failed to fetch pending bookings');\n    }\n  };\n\n  // Function to handle booking status change (confirm/reject)\n  const handleBookingStatusChange = async (bookingId, action) => {\n    try {\n      if (!user?.email) return;\n\n      const response = await fetch(`${API_BASE_URL}/admin/booking/${bookingId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          admin_email: user.email,\n          action: action\n        })\n      });\n\n      if (!response.ok) throw new Error(`Failed to ${action} booking`);\n\n      // Refresh pending bookings list\n      await fetchPendingBookingsData();\n      setSuccess(`Booking ${action}ed successfully`);\n    } catch (error) {\n      console.error(`Error ${action}ing booking:`, error);\n      setError(`Failed to ${action} booking`);\n    }\n  };\n\n  return (\n    <div className=\"slot-booking-container\">\n      <h2>Lab Slot Booking</h2>\n      \n      <form onSubmit={handleBookingSubmit} className=\"booking-form\">\n        <label htmlFor=\"facultyId\">Faculty ID:</label>\n        <input \n          type=\"text\" \n          id=\"facultyId\" \n          name=\"facultyId\" \n          value={bookingForm.facultyId}\n          onChange={handleBookingChange}\n          required \n          placeholder=\"Enter your faculty ID\"\n          disabled={loading || apiError}\n        />\n\n        <label htmlFor=\"name\">Full Name:</label>\n        <input \n          type=\"text\" \n          id=\"name\" \n          name=\"name\" \n          value={bookingForm.name}\n          onChange={handleBookingChange}\n          required\n          placeholder=\"Enter your full name\"\n        />\n\n        <label htmlFor=\"email\">Email (SRM):</label>\n        <input \n          type=\"email\" \n          id=\"email\" \n          name=\"email\" \n          value={bookingForm.email}\n          readOnly\n          disabled\n          className=\"readonly-input\"\n        />\n\n        <label htmlFor=\"department\">Department:</label>\n        <select \n          id=\"department\" \n          name=\"department\" \n          value={bookingForm.department}\n          onChange={handleBookingChange}\n          required\n          disabled={loading || apiError}\n        >\n          <option value=\"\">Select Department</option>\n          <option value=\"NETWORKING\">Networking</option>\n          <option value=\"CINTEL\">CINTEL</option>\n          <option value=\"DSBS\">DSBS</option>\n          <option value=\"CTECH\">CTECH</option>\n        </select>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"date\">Date:</label>\n          <input\n            type=\"date\"\n            id=\"date\"\n            name=\"date\"\n            value={bookingForm.date}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"dayOrder\">Day Order:</label>\n          <input\n            type=\"text\"\n            id=\"dayOrder\"\n            name=\"dayOrder\"\n            value={bookingForm.dayOrder ? `Day ${bookingForm.dayOrder}` : ''}\n            readOnly\n            className=\"readonly-input\"\n            style={{ backgroundColor: '#f5f5f5', padding: '8px', border: '1px solid #ddd' }}\n            placeholder=\"Select a date to see day order\"\n          />\n        </div>\n\n        <label htmlFor=\"lab\">Select Lab:</label>\n        <select \n          id=\"lab\" \n          name=\"lab\" \n          value={bookingForm.lab}\n          onChange={handleBookingChange}\n          required\n          disabled={loading || apiError}\n          className=\"lab-select\"\n        >\n          <option value=\"\">Select a Lab</option>\n          <option value=\"LAB A\">LAB A</option>\n          <option value=\"LAB B\">LAB B</option>\n          <option value=\"LAB C\">LAB C</option>\n          <option value=\"LAB D\">LAB D</option>\n        </select>\n\n        <div className=\"time-slots-grid\">\n          {loading && timeSlots.length === 0 ? (\n            <div>Loading available slots...</div>\n          ) : timeSlots.length > 0 ? (\n            timeSlots.map(slot => (\n              <div\n                key={slot.value}\n                className={`time-slot-item ${!slot.available ? 'disabled' : ''} ${selectedSlots.includes(slot.value) ? 'selected' : ''}`}\n                onClick={() => slot.available && handleSlotSelect(slot.value)}\n              >\n                <div className=\"time-slot-time\">{slot.label}</div>\n                <div className=\"time-slot-status\">\n                  {slot.available ? 'Available' : 'Booked'}\n                </div>\n              </div>\n            ))\n          ) : (\n            <div>Select a date and lab first</div>\n          )}\n        </div>\n\n        <div className=\"selected-slots\">\n          <h3>Selected Time Slots:</h3>\n          {selectedSlots.length > 0 ? (\n            <div className=\"selected-slots-list\">\n              {selectedSlots.map(slot => (\n                <div key={slot} className=\"selected-slot-item\">\n                  {slot}\n                  <button \n                    className=\"remove-slot\"\n                    onClick={() => handleSlotSelect(slot)}\n                  >\n                    ×\n                  </button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p>No slots selected</p>\n          )}\n        </div>\n\n        <div className=\"button-container\">\n          <button \n            onClick={handleBooking} \n            className=\"booking-button\"\n            disabled={loading || apiError || selectedSlots.length === 0}\n          >\n            {loading ? 'Booking...' : `Book ${selectedSlots.length} Slot${selectedSlots.length !== 1 ? 's' : ''}`}\n          </button>\n        </div>\n      </form>\n\n      {apiError && (\n        <div className=\"api-error\">\n          <h3>Connection Error</h3>\n          <p>Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.</p>\n          <button \n            onClick={handleRetryConnection} \n            disabled={loading}\n            className=\"action-button\"\n          >\n            {loading ? 'Trying to connect...' : 'Retry Connection'}\n          </button>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-message\">\n          {success}\n        </div>\n      )}\n      \n      {message && (\n        <div className={`message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`}>\n          {message}\n        </div>\n      )}\n\n      {showBookedSlots && bookedSlots.length > 0 && (\n        <div className=\"booked-slots-list\">\n          {bookedSlots.map(booking => (\n            <div key={booking.id} className=\"booked-slot-item\">\n              <div className=\"booked-slot-details\">\n                <p><strong>Date:</strong> {booking.date}</p>\n                <p><strong>Time Slot:</strong> {booking.time_slot}</p>\n                <p><strong>Day Order:</strong> {booking.day_order}</p>\n                <p><strong>Lab:</strong> {booking.lab}</p>\n                <p><strong>Status:</strong> <span className={`status-${booking.status?.toLowerCase() || 'waiting'}`}>\n                  {booking.status?.charAt(0).toUpperCase() + booking.status?.slice(1) || 'Waiting'}\n                </span></p>\n              </div>\n              {(booking.status === 'waiting' || booking.status === 'confirmed') && (\n                <button\n                  onClick={() => handleDeleteBookedSlot(booking.id)}\n                  className=\"delete-button\"\n                  disabled={loading}\n                >\n                  Cancel Booking\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SlotBooking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}