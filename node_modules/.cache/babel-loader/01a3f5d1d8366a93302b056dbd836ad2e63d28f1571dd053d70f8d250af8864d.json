{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91989\\\\Desktop\\\\SRMLAB - Copy\\\\react-version\\\\src\\\\pages\\\\SlotBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, API_BASE_URL } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SlotBooking = () => {\n  _s();\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    dayOrder: '1',\n    lab: '',\n    timeSlot: ''\n  });\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Check API health on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    checkServerHealth();\n\n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    const dateInput = document.getElementById(\"date\");\n    if (dateInput) {\n      dateInput.setAttribute(\"min\", today);\n\n      // Add event listener to disable weekends\n      dateInput.addEventListener(\"input\", disableWeekends);\n    }\n  }, []);\n\n  // Function to disable weekend dates\n  const disableWeekends = e => {\n    const selectedDate = e.target.value;\n    if (isWeekend(selectedDate)) {\n      setError(\"Weekends (Saturday and Sunday) are not available for booking.\");\n\n      // Reset the date input\n      setBookingForm(prev => ({\n        ...prev,\n        date: ''\n      }));\n    }\n  };\n  useEffect(() => {\n    const initializeBookings = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          // Set both email and name in the booking form when user is authenticated\n          setBookingForm(prev => {\n            var _user$user_metadata;\n            return {\n              ...prev,\n              email: user.email,\n              name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.full_name) || user.email\n            };\n          });\n          // Fetch user bookings if email is available\n          if (user.email) {\n            await fetchUserBookings(user.email);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing bookings:', error);\n      }\n    };\n    initializeBookings();\n  }, []);\n\n  // Utility function to check if a date is a weekend\n  const isWeekend = date => {\n    const day = new Date(date).getDay();\n    // 0 is Sunday, 6 is Saturday\n    return day === 0 || day === 6;\n  };\n\n  // Function to provide a descriptive date string\n  const formatDateForDisplay = dateString => {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    const isWeekendDay = day === 0 || day === 6;\n    const formattedDate = date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\n  };\n\n  // Handle booking form input changes\n  const handleBookingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n\n    // Check if it's a weekend date\n    if (name === 'date' && value) {\n      if (isWeekend(value)) {\n        setError(\"Weekends (Saturday and Sunday) are not available for booking.\");\n        return;\n      }\n    }\n\n    // Update the booking form state\n    setBookingForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Clear previous errors and success messages\n    setError('');\n    setSuccess('');\n\n    // Fetch available seats when date, lab, department, or day order changes\n    if (['date', 'lab', 'department', 'dayOrder'].includes(name) && value) {\n      setTimeSlots([]);\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    if (isHealthy && bookingForm.date && bookingForm.lab) {\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n    }\n  };\n\n  // Fetch available seats for selected date and lab\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\n    if (!selectedDate || !selectedLab) {\n      setTimeSlots([]);\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    try {\n      const params = new URLSearchParams({\n        date: selectedDate,\n        lab: selectedLab,\n        dayOrder: bookingForm.dayOrder,\n        department: bookingForm.department\n      });\n      const response = await fetch(`${API_BASE_URL}/available-seats?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch available seats');\n      }\n      const data = await response.json();\n      console.log('Available slots response:', data);\n\n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [{\n        value: \"08:00-08:50\",\n        label: \"8:00 AM - 8:50 AM\",\n        available: data[\"08:00-08:50\"] === true\n      }, {\n        value: \"08:50-09:40\",\n        label: \"8:50 AM - 9:40 AM\",\n        available: data[\"08:50-09:40\"] === true\n      }, {\n        value: \"09:45-10:35\",\n        label: \"9:45 AM - 10:35 AM\",\n        available: data[\"09:45-10:35\"] === true\n      }, {\n        value: \"10:40-11:30\",\n        label: \"10:40 AM - 11:30 AM\",\n        available: data[\"10:40-11:30\"] === true\n      }, {\n        value: \"11:35-12:25\",\n        label: \"11:35 AM - 12:25 PM\",\n        available: data[\"11:35-12:25\"] === true\n      }, {\n        value: \"12:30-01:20\",\n        label: \"12:30 PM - 1:20 PM\",\n        available: data[\"12:30-01:20\"] === true\n      }, {\n        value: \"01:25-02:15\",\n        label: \"1:25 PM - 2:15 PM\",\n        available: data[\"01:25-02:15\"] === true\n      }, {\n        value: \"02:20-03:10\",\n        label: \"2:20 PM - 3:10 PM\",\n        available: data[\"02:20-03:10\"] === true\n      }, {\n        value: \"03:10-04:00\",\n        label: \"3:10 PM - 4:00 PM\",\n        available: data[\"03:10-04:00\"] === true\n      }, {\n        value: \"04:00-04:50\",\n        label: \"4:00 PM - 4:50 PM\",\n        available: data[\"04:00-04:50\"] === true\n      }];\n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async e => {\n    e.preventDefault();\n\n    // Clear previous messages\n    setError('');\n    setSuccess('');\n\n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n\n      // Refresh the bookings after successful booking\n      fetchUserBookings(bookingForm.email);\n\n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: bookingForm.email,\n        // Keep the email\n        department: '',\n        date: '',\n        dayOrder: '1',\n        lab: '',\n        timeSlot: ''\n      });\n\n      // Clear time slots\n      setTimeSlots([]);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked slots for a user\n  const fetchUserBookings = async email => {\n    if (!email || !email.toLowerCase().endsWith('@srmist.edu.in')) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await fetchBookedSlots(email);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for your email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        console.error('Error fetching bookings:', error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async bookingId => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n\n      // Refresh the booked slots using the email from the form\n      if (bookingForm.email) {\n        fetchUserBookings(bookingForm.email);\n      }\n\n      // Fetch available seats again to update the slots\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n    setSelectedSlot(null);\n    setError('');\n    setSuccess('');\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlot(slot);\n    setError('');\n    setSuccess('');\n  };\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedSlot) {\n      setError('Please select both date and time slot.');\n      return;\n    }\n    try {\n      var _user$user_metadata2, _user$user_metadata3, _user$user_metadata4;\n      setLoading(true);\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        setError('Please sign in to book a slot.');\n        return;\n      }\n      const response = await fetch(`${API_BASE_URL}/book-slot`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          date: selectedDate,\n          timeSlot: selectedSlot,\n          email: user.email,\n          facultyId: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.registration_number) || user.email,\n          name: ((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.full_name) || user.email,\n          department: ((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.department) || 'Not specified'\n        })\n      });\n\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Error booking slot.');\n        return;\n      }\n      setSuccess(data.message);\n\n      // Reset selections after successful booking\n      setSelectedSlot(null);\n      // Refresh the bookings list\n      fetchUserBookings(user.email);\n    } catch (error) {\n      setError('Error booking slot. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connection Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryConnection,\n        disabled: loading,\n        className: \"action-button\",\n        children: loading ? 'Trying to connect...' : 'Retry Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"lab-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Book Your Lab Slot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleBookingSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"facultyId\",\n          children: \"Faculty ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"facultyId\",\n          name: \"facultyId\",\n          value: bookingForm.facultyId,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your faculty ID\",\n          disabled: loading || apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Full Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: bookingForm.name,\n          onChange: handleBookingChange,\n          required: true,\n          placeholder: \"Enter your full name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email (SRM):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: bookingForm.email,\n          readOnly: true,\n          disabled: true,\n          className: \"readonly-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          children: \"Department:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"department\",\n          name: \"department\",\n          value: bookingForm.department,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"NETWORKING\",\n            children: \"Networking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CINTEL\",\n            children: \"CINTEL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DSBS\",\n            children: \"DSBS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CTECH\",\n            children: \"CTECH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: bookingForm.date,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          min: new Date().toISOString().split(\"T\")[0],\n          onKeyDown: e => e.preventDefault()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"date-instructions\",\n          children: \"Note: Weekends (Saturday and Sunday) are not available for booking.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dayOrder\",\n          children: \"Day Order:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dayOrder\",\n          name: \"dayOrder\",\n          value: bookingForm.dayOrder,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"Day Order 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"Day Order 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"Day Order 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"Day Order 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"Day Order 5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lab\",\n          children: \"Select Lab:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"lab\",\n          name: \"lab\",\n          value: bookingForm.lab,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError,\n          className: \"lab-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a Lab\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAB A\",\n            children: \"LAB A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAB B\",\n            children: \"LAB B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAB C\",\n            children: \"LAB C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"LAB D\",\n            children: \"LAB D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"timeSlot\",\n          children: \"Time Slot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"timeSlot\",\n          name: \"timeSlot\",\n          value: bookingForm.timeSlot,\n          onChange: handleBookingChange,\n          required: true,\n          disabled: loading || apiError || timeSlots.length === 0,\n          className: \"time-slot-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a slot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 13\n          }, this), loading && timeSlots.length === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Loading available slots...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this) : timeSlots.length > 0 ? timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: slot.value,\n            disabled: !slot.available,\n            className: !slot.available ? 'slot-full' : '',\n            children: `${slot.label} (${slot.available ? 'Available' : 'Booked'})`\n          }, slot.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a date first\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"bookSlotButton\",\n            className: \"booking-button\",\n            disabled: loading || apiError,\n            children: loading ? 'Booking...' : 'Book Slot'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"user-bookings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Booked Slots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading your bookings...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 21\n      }, this), bookedSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"booked-slots-list\",\n        children: bookedSlots.map(slot => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"booked-slot-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booked-slot-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 19\n            }, this), \" \", slot.date, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 53\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 19\n            }, this), \" \", slot.time_slot, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 58\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Lab:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 19\n            }, this), \" \", slot.lab || \"Not specified\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteBookedSlot(slot.id),\n            disabled: loading || apiError,\n            className: \"delete-button\",\n            children: \"Cancel Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 17\n          }, this)]\n        }, slot.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-bookings\",\n        children: loading ? 'Loading...' : 'No bookings found for your account.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n};\n_s(SlotBooking, \"tFy6wUQ3BmF7maFs9Bv7ypgU9KI=\");\n_c = SlotBooking;\nexport default SlotBooking;\nvar _c;\n$RefreshReg$(_c, \"SlotBooking\");","map":{"version":3,"names":["React","useState","useEffect","fetchAvailableSeats","bookSlot","fetchBookedSlots","deleteBookedSlot","checkApiHealth","API_BASE_URL","supabase","TimeSlots","jsxDEV","_jsxDEV","SlotBooking","_s","bookingForm","setBookingForm","facultyId","name","email","department","date","dayOrder","lab","timeSlot","timeSlots","setTimeSlots","loading","setLoading","bookedSlots","setBookedSlots","showBookedSlots","setShowBookedSlots","error","setError","success","setSuccess","apiError","setApiError","selectedDate","setSelectedDate","selectedSlot","setSelectedSlot","message","setMessage","checkServerHealth","isHealthy","today","Date","toISOString","split","dateInput","document","getElementById","setAttribute","addEventListener","disableWeekends","e","target","value","isWeekend","prev","initializeBookings","data","user","auth","getUser","_user$user_metadata","user_metadata","full_name","fetchUserBookings","console","day","getDay","formatDateForDisplay","dateString","isWeekendDay","formattedDate","toLocaleDateString","weekday","year","month","handleBookingChange","includes","handleFetchAvailableSeats","handleRetryConnection","selectedLab","params","URLSearchParams","response","fetch","ok","Error","json","log","availableTimeSlots","label","available","handleBookingSubmit","preventDefault","toLowerCase","endsWith","length","handleDeleteBookedSlot","bookingId","window","confirm","handleDateChange","handleSlotSelect","slot","handleBooking","_user$user_metadata2","_user$user_metadata3","_user$user_metadata4","method","headers","body","JSON","stringify","registration_number","contentType","get","text","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","onSubmit","htmlFor","type","onChange","required","placeholder","readOnly","min","onKeyDown","map","time_slot","_c","$RefreshReg$"],"sources":["C:/Users/91989/Desktop/SRMLAB - Copy/react-version/src/pages/SlotBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchAvailableSeats, bookSlot, fetchBookedSlots, deleteBookedSlot, checkApiHealth, API_BASE_URL } from '../services/api';\nimport './SlotBooking.css';\nimport { supabase } from '../supabaseClient';\nimport TimeSlots from '../components/TimeSlots';\n\nconst SlotBooking = () => {\n  // Form state\n  const [bookingForm, setBookingForm] = useState({\n    facultyId: '',\n    name: '',\n    email: '',\n    department: '',\n    date: '',\n    dayOrder: '1',\n    lab: '',\n    timeSlot: ''\n  });\n\n  // UI state\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [showBookedSlots, setShowBookedSlots] = useState(true); // Set to true by default\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [apiError, setApiError] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [message, setMessage] = useState('');\n\n  // Check API health on component mount\n  useEffect(() => {\n    const checkServerHealth = async () => {\n      const isHealthy = await checkApiHealth();\n      setApiError(!isHealthy);\n    };\n    \n    checkServerHealth();\n    \n    // Set the minimum date to today\n    const today = new Date().toISOString().split(\"T\")[0];\n    const dateInput = document.getElementById(\"date\");\n    if (dateInput) {\n      dateInput.setAttribute(\"min\", today);\n      \n      // Add event listener to disable weekends\n      dateInput.addEventListener(\"input\", disableWeekends);\n    }\n  }, []);\n  \n  // Function to disable weekend dates\n  const disableWeekends = (e) => {\n    const selectedDate = e.target.value;\n    \n    if (isWeekend(selectedDate)) {\n      setError(\"Weekends (Saturday and Sunday) are not available for booking.\");\n      \n      // Reset the date input\n      setBookingForm(prev => ({\n        ...prev,\n        date: ''\n      }));\n    }\n  };\n\n  useEffect(() => {\n    const initializeBookings = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          // Set both email and name in the booking form when user is authenticated\n          setBookingForm(prev => ({\n            ...prev,\n            email: user.email,\n            name: user.user_metadata?.full_name || user.email\n          }));\n          // Fetch user bookings if email is available\n          if (user.email) {\n            await fetchUserBookings(user.email);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing bookings:', error);\n      }\n    };\n\n    initializeBookings();\n  }, []);\n  \n  // Utility function to check if a date is a weekend\n  const isWeekend = (date) => {\n    const day = new Date(date).getDay();\n    // 0 is Sunday, 6 is Saturday\n    return day === 0 || day === 6;\n  };\n  \n  // Function to provide a descriptive date string\n  const formatDateForDisplay = (dateString) => {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    const isWeekendDay = day === 0 || day === 6;\n    const formattedDate = date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });\n    \n    return `${formattedDate}${isWeekendDay ? ' (Weekend - Not Available)' : ''}`;\n  };\n\n  // Handle booking form input changes\n  const handleBookingChange = (e) => {\n    const { name, value } = e.target;\n    \n    // Prevent only email from being changed\n    if (name === 'email') {\n      return;\n    }\n    \n    // Check if it's a weekend date\n    if (name === 'date' && value) {\n      if (isWeekend(value)) {\n        setError(\"Weekends (Saturday and Sunday) are not available for booking.\");\n        return;\n      }\n    }\n    \n    // Update the booking form state\n    setBookingForm(prev => ({ ...prev, [name]: value }));\n\n    // Clear previous errors and success messages\n    setError('');\n    setSuccess('');\n\n    // Fetch available seats when date, lab, department, or day order changes\n    if (['date', 'lab', 'department', 'dayOrder'].includes(name) && value) {\n      setTimeSlots([]);\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n    }\n  };\n\n  // Retry server connection\n  const handleRetryConnection = async () => {\n    setLoading(true);\n    const isHealthy = await checkApiHealth();\n    setApiError(!isHealthy);\n    setLoading(false);\n    \n    if (isHealthy && bookingForm.date && bookingForm.lab) {\n      handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n    }\n  };\n\n  // Fetch available seats for selected date and lab\n  const handleFetchAvailableSeats = async (selectedDate, selectedLab) => {\n    if (!selectedDate || !selectedLab) {\n      setTimeSlots([]);\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setApiError(false);\n    \n    try {\n      const params = new URLSearchParams({\n        date: selectedDate,\n        lab: selectedLab,\n        dayOrder: bookingForm.dayOrder,\n        department: bookingForm.department\n      });\n      \n      const response = await fetch(`${API_BASE_URL}/available-seats?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch available seats');\n      }\n      \n      const data = await response.json();\n      console.log('Available slots response:', data);\n      \n      // Transform data for the time slot dropdown with boolean availability\n      const availableTimeSlots = [\n        { value: \"08:00-08:50\", label: \"8:00 AM - 8:50 AM\", available: data[\"08:00-08:50\"] === true },\n        { value: \"08:50-09:40\", label: \"8:50 AM - 9:40 AM\", available: data[\"08:50-09:40\"] === true },\n        { value: \"09:45-10:35\", label: \"9:45 AM - 10:35 AM\", available: data[\"09:45-10:35\"] === true },\n        { value: \"10:40-11:30\", label: \"10:40 AM - 11:30 AM\", available: data[\"10:40-11:30\"] === true },\n        { value: \"11:35-12:25\", label: \"11:35 AM - 12:25 PM\", available: data[\"11:35-12:25\"] === true },\n        { value: \"12:30-01:20\", label: \"12:30 PM - 1:20 PM\", available: data[\"12:30-01:20\"] === true },\n        { value: \"01:25-02:15\", label: \"1:25 PM - 2:15 PM\", available: data[\"01:25-02:15\"] === true },\n        { value: \"02:20-03:10\", label: \"2:20 PM - 3:10 PM\", available: data[\"02:20-03:10\"] === true },\n        { value: \"03:10-04:00\", label: \"3:10 PM - 4:00 PM\", available: data[\"03:10-04:00\"] === true },\n        { value: \"04:00-04:50\", label: \"4:00 PM - 4:50 PM\", available: data[\"04:00-04:50\"] === true }\n      ];\n      \n      setTimeSlots(availableTimeSlots);\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle booking form submission\n  const handleBookingSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Clear previous messages\n    setError('');\n    setSuccess('');\n    \n    // Validate form inputs\n    if (!bookingForm.facultyId || !bookingForm.name || !bookingForm.email || !bookingForm.date || !bookingForm.timeSlot) {\n      setError(\"Please fill out all fields before submitting.\");\n      return;\n    }\n\n    // Validate SRM email\n    if (!bookingForm.email.toLowerCase().endsWith('@srmist.edu.in')) {\n      setError(\"Please use an email ending with @srmist.edu.in\");\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await bookSlot(bookingForm);\n      setSuccess(data.message);\n      \n      // Refresh the bookings after successful booking\n      fetchUserBookings(bookingForm.email);\n      \n      // Reset form only on successful booking\n      setBookingForm({\n        facultyId: '',\n        name: '',\n        email: bookingForm.email, // Keep the email\n        department: '',\n        date: '',\n        dayOrder: '1',\n        lab: '',\n        timeSlot: ''\n      });\n      \n      // Clear time slots\n      setTimeSlots([]);\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch booked slots for a user\n  const fetchUserBookings = async (email) => {\n    if (!email || !email.toLowerCase().endsWith('@srmist.edu.in')) {\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const data = await fetchBookedSlots(email);\n      setBookedSlots(data);\n      setShowBookedSlots(true);\n      \n      if (data.length === 0) {\n        setSuccess(\"No booked slots found for your email.\");\n      }\n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        console.error('Error fetching bookings:', error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a booked slot\n  const handleDeleteBookedSlot = async (bookingId) => {\n    if (!window.confirm(\"Are you sure you want to delete this slot?\")) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const data = await deleteBookedSlot(bookingId);\n      setSuccess(data.message);\n      \n      // Refresh the booked slots using the email from the form\n      if (bookingForm.email) {\n        fetchUserBookings(bookingForm.email);\n      }\n      \n      // Fetch available seats again to update the slots\n      if (bookingForm.date && bookingForm.lab) {\n        handleFetchAvailableSeats(bookingForm.date, bookingForm.lab);\n      }\n      \n    } catch (error) {\n      if (error.message.includes('Backend server is not running')) {\n        setApiError(true);\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDateChange = (e) => {\n    setSelectedDate(e.target.value);\n    setSelectedSlot(null);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleSlotSelect = (slot) => {\n    setSelectedSlot(slot);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleBooking = async () => {\n    if (!selectedDate || !selectedSlot) {\n      setError('Please select both date and time slot.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n\n      if (!user) {\n        setError('Please sign in to book a slot.');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/book-slot`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          date: selectedDate,\n          timeSlot: selectedSlot,\n          email: user.email,\n          facultyId: user.user_metadata?.registration_number || user.email,\n          name: user.user_metadata?.full_name || user.email,\n          department: user.user_metadata?.department || 'Not specified'\n        }),\n      });\n\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        console.error('Non-JSON response:', await response.text());\n        throw new Error('Backend server error. Please make sure the server is running.');\n      }\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        setError(data.message || 'Error booking slot.');\n        return;\n      }\n      \n      setSuccess(data.message);\n      \n      // Reset selections after successful booking\n      setSelectedSlot(null);\n      // Refresh the bookings list\n      fetchUserBookings(user.email);\n    } catch (error) {\n      setError('Error booking slot. Please try again.');\n      console.error('Booking error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main>\n      {apiError && (\n        <div className=\"api-error\">\n          <h3>Connection Error</h3>\n          <p>Cannot connect to the backend server. Please make sure the Flask server is running on port 8080.</p>\n          <button \n            onClick={handleRetryConnection} \n            disabled={loading}\n            className=\"action-button\"\n          >\n            {loading ? 'Trying to connect...' : 'Retry Connection'}\n          </button>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-message\">\n          {success}\n        </div>\n      )}\n      \n      {message && (\n        <div className={`message ${message.includes('Error') || message.includes('Please') ? 'error' : 'success'}`}>\n          {message}\n        </div>\n      )}\n      \n      <section id=\"lab-booking\">\n        <h2>Book Your Lab Slot</h2>\n        <form onSubmit={handleBookingSubmit}>\n          <label htmlFor=\"facultyId\">Faculty ID:</label>\n          <input \n            type=\"text\" \n            id=\"facultyId\" \n            name=\"facultyId\" \n            value={bookingForm.facultyId}\n            onChange={handleBookingChange}\n            required \n            placeholder=\"Enter your faculty ID\"\n            disabled={loading || apiError}\n          />\n\n          <label htmlFor=\"name\">Full Name:</label>\n          <input \n            type=\"text\" \n            id=\"name\" \n            name=\"name\" \n            value={bookingForm.name}\n            onChange={handleBookingChange}\n            required\n            placeholder=\"Enter your full name\"\n          />\n\n          <label htmlFor=\"email\">Email (SRM):</label>\n          <input \n            type=\"email\" \n            id=\"email\" \n            name=\"email\" \n            value={bookingForm.email}\n            readOnly\n            disabled\n            className=\"readonly-input\"\n          />\n\n          <label htmlFor=\"department\">Department:</label>\n          <select \n            id=\"department\" \n            name=\"department\" \n            value={bookingForm.department}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError}\n          >\n            <option value=\"\">Select Department</option>\n            <option value=\"NETWORKING\">Networking</option>\n            <option value=\"CINTEL\">CINTEL</option>\n            <option value=\"DSBS\">DSBS</option>\n            <option value=\"CTECH\">CTECH</option>\n          </select>\n\n          <label htmlFor=\"date\">Date:</label>\n          <input \n            type=\"date\" \n            id=\"date\" \n            name=\"date\" \n            value={bookingForm.date}\n            onChange={handleBookingChange}\n            required \n            disabled={loading || apiError}\n            min={new Date().toISOString().split(\"T\")[0]}\n            onKeyDown={(e) => e.preventDefault()}\n          />\n          <small className=\"date-instructions\">Note: Weekends (Saturday and Sunday) are not available for booking.</small>\n\n          <label htmlFor=\"dayOrder\">Day Order:</label>\n          <select \n            id=\"dayOrder\" \n            name=\"dayOrder\" \n            value={bookingForm.dayOrder}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError}\n          >\n            <option value=\"1\">Day Order 1</option>\n            <option value=\"2\">Day Order 2</option>\n            <option value=\"3\">Day Order 3</option>\n            <option value=\"4\">Day Order 4</option>\n            <option value=\"5\">Day Order 5</option>\n          </select>\n\n          <label htmlFor=\"lab\">Select Lab:</label>\n          <select \n            id=\"lab\" \n            name=\"lab\" \n            value={bookingForm.lab}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError}\n            className=\"lab-select\"\n          >\n            <option value=\"\">Select a Lab</option>\n            <option value=\"LAB A\">LAB A</option>\n            <option value=\"LAB B\">LAB B</option>\n            <option value=\"LAB C\">LAB C</option>\n            <option value=\"LAB D\">LAB D</option>\n          </select>\n\n          <label htmlFor=\"timeSlot\">Time Slot:</label>\n          <select \n            id=\"timeSlot\" \n            name=\"timeSlot\" \n            value={bookingForm.timeSlot}\n            onChange={handleBookingChange}\n            required\n            disabled={loading || apiError || timeSlots.length === 0}\n            className=\"time-slot-select\"\n          >\n            <option value=\"\">Select a slot</option>\n            {loading && timeSlots.length === 0 ? (\n              <option value=\"\">Loading available slots...</option>\n            ) : timeSlots.length > 0 ? (\n              timeSlots.map(slot => (\n                <option \n                  key={slot.value} \n                  value={slot.value}\n                  disabled={!slot.available}\n                  className={!slot.available ? 'slot-full' : ''}\n                >\n                  {`${slot.label} (${slot.available ? 'Available' : 'Booked'})`}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">Select a date first</option>\n            )}\n          </select>\n\n          <div className=\"button-container\">\n            <button \n              type=\"submit\" \n              id=\"bookSlotButton\" \n              className=\"booking-button\"\n              disabled={loading || apiError}\n            >\n              {loading ? 'Booking...' : 'Book Slot'}\n            </button>\n          </div>\n        </form>\n      </section>\n\n      <section id=\"user-bookings\">\n        <h2>Your Booked Slots</h2>\n        \n        {loading && <div className=\"loading\">Loading your bookings...</div>}\n        \n        {bookedSlots.length > 0 ? (\n          <div className=\"booked-slots-list\">\n            {bookedSlots.map(slot => (\n              <div key={slot.id} className=\"booked-slot-item\">\n                <div className=\"booked-slot-details\">\n                  <strong>Date:</strong> {slot.date}<br />\n                  <strong>Time:</strong> {slot.time_slot}<br />\n                  <strong>Lab:</strong> {slot.lab || \"Not specified\"}\n                </div>\n                <button \n                  onClick={() => handleDeleteBookedSlot(slot.id)}\n                  disabled={loading || apiError}\n                  className=\"delete-button\"\n                >\n                  Cancel Booking\n                </button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"no-bookings\">\n            {loading ? 'Loading...' : 'No bookings found for your account.'}\n          </div>\n        )}\n      </section>\n    </main>\n  );\n};\n\nexport default SlotBooking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}