{"ast":null,"code":"const API_BASE_URL = 'http://127.0.0.1:8080/api';\n\n// Helper function to check API health\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      timeout: 5000\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    return false;\n  }\n};\nexport const fetchAvailableSeats = async date => {\n  try {\n    // First check if the API is responsive\n    const isApiHealthy = await checkApiHealth();\n    if (!isApiHealthy) {\n      throw new Error('Backend server is not running. Please start the server first.');\n    }\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch available seats. Please try again.');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching available seats:', error);\n    throw error;\n  }\n};\nexport const bookSlot = async bookingData => {\n  try {\n    // First check if the API is responsive\n    const isApiHealthy = await checkApiHealth();\n    if (!isApiHealthy) {\n      throw new Error('Backend server is not running. Please start the server first.');\n    }\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookingData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || data.error || 'Failed to book slot');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    throw error;\n  }\n};\nexport const fetchBookedSlots = async email => {\n  try {\n    // First check if the API is responsive\n    const isApiHealthy = await checkApiHealth();\n    if (!isApiHealthy) {\n      throw new Error('Backend server is not running. Please start the server first.');\n    }\n    const response = await fetch(`${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to fetch booked slots');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching booked slots:', error);\n    throw error;\n  }\n};\nexport const deleteBookedSlot = async bookingId => {\n  try {\n    // First check if the API is responsive\n    const isApiHealthy = await checkApiHealth();\n    if (!isApiHealthy) {\n      throw new Error('Backend server is not running. Please start the server first.');\n    }\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${bookingId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to delete slot');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error deleting slot:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","checkApiHealth","response","fetch","timeout","ok","error","console","fetchAvailableSeats","date","isApiHealthy","Error","data","json","bookSlot","bookingData","method","headers","body","JSON","stringify","message","fetchBookedSlots","email","encodeURIComponent","deleteBookedSlot","bookingId"],"sources":["C:/Users/91989/Desktop/KARTIK/random project/fswd/SRMLAB/react-version/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://127.0.0.1:8080/api';\r\n\r\n// Helper function to check API health\r\nexport const checkApiHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`, { timeout: 5000 });\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('API health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const fetchAvailableSeats = async (date) => {\r\n  try {\r\n    // First check if the API is responsive\r\n    const isApiHealthy = await checkApiHealth();\r\n    if (!isApiHealthy) {\r\n      throw new Error('Backend server is not running. Please start the server first.');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/available-seats?date=${date}`);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to fetch available seats. Please try again.');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching available seats:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const bookSlot = async (bookingData) => {\r\n  try {\r\n    // First check if the API is responsive\r\n    const isApiHealthy = await checkApiHealth();\r\n    if (!isApiHealthy) {\r\n      throw new Error('Backend server is not running. Please start the server first.');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/book-slot`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bookingData)\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || data.error || 'Failed to book slot');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error booking slot:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchBookedSlots = async (email) => {\r\n  try {\r\n    // First check if the API is responsive\r\n    const isApiHealthy = await checkApiHealth();\r\n    if (!isApiHealthy) {\r\n      throw new Error('Backend server is not running. Please start the server first.');\r\n    }\r\n    \r\n    const response = await fetch(\r\n      `${API_BASE_URL}/booked-slots?email=${encodeURIComponent(email)}`\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to fetch booked slots');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching booked slots:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteBookedSlot = async (bookingId) => {\r\n  try {\r\n    // First check if the API is responsive\r\n    const isApiHealthy = await checkApiHealth();\r\n    if (!isApiHealthy) {\r\n      throw new Error('Backend server is not running. Please start the server first.');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/delete-slot/${bookingId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Failed to delete slot');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error deleting slot:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,SAAS,EAAE;MAAEI,OAAO,EAAE;IAAK,CAAC,CAAC;IACzE,OAAOF,QAAQ,CAACG,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAG,MAAOC,IAAI,IAAK;EACjD,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,MAAMT,cAAc,CAAC,CAAC;IAC3C,IAAI,CAACS,YAAY,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,yBAAyBS,IAAI,EAAE,CAAC;IAE5E,MAAMG,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACX,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,oDAAoD,CAAC;IACrF;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAOC,WAAW,IAAK;EAC7C,IAAI;IACF;IACA,MAAML,YAAY,GAAG,MAAMT,cAAc,CAAC,CAAC;IAC3C,IAAI,CAACS,YAAY,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,EAAE;MACxDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMH,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACX,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACS,OAAO,IAAIT,IAAI,CAACN,KAAK,IAAI,qBAAqB,CAAC;IACtE;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMgB,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI;IACF;IACA,MAAMb,YAAY,GAAG,MAAMT,cAAc,CAAC,CAAC;IAC3C,IAAI,CAACS,YAAY,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGH,YAAY,uBAAuBwB,kBAAkB,CAACD,KAAK,CAAC,EACjE,CAAC;IAED,MAAMX,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACX,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,8BAA8B,CAAC;IAC/D;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMmB,gBAAgB,GAAG,MAAOC,SAAS,IAAK;EACnD,IAAI;IACF;IACA,MAAMhB,YAAY,GAAG,MAAMT,cAAc,CAAC,CAAC;IAC3C,IAAI,CAACS,YAAY,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;IAClF;IAEA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgB0B,SAAS,EAAE,EAAE;MACvEV,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAML,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACX,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIM,KAAK,CAACC,IAAI,CAACN,KAAK,IAAI,uBAAuB,CAAC;IACxD;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}